{"version":3,"file":"oxi.es.js","sources":["../src/html.ts","../src/format.ts","../src/tasker-errors.ts","../src/tasker.ts","../src/mutation-observer.ts","../src/wait-for-element-errors.ts","../src/wait-for-element.ts","../node_modules/.pnpm/normalize-url@8.0.0/node_modules/normalize-url/index.js","../src/network.ts","../src/network-interceptor.ts"],"sourcesContent":["\n\nexport const HTMLEntityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n} as const;\n\nexport function escapeHTML(text: string) {\n    return text.replace(/[&<>\"'`=\\/]/g, (s) => HTMLEntityMap[s as keyof typeof HTMLEntityMap]);\n}\n  \nexport function html<Elem extends Element>(template: readonly string[], ...subst: any[]): Elem {\n    const completeString = [];\n\n    for (let i = 0; i < template.length; i++) {\n        completeString.push(template[i]);\n        if (subst[i]) completeString.push(escapeHTML(String(subst[i])));\n    }\n\n    return fromHTML<Elem>(completeString.join(\"\"));\n}\n\nexport function fromHTML<Elem extends Element>(text: string): Elem {\n    const elem = document.createElement(\"div\");\n    elem.innerHTML = text;\n    setTimeout(() => elem.remove());\n    return elem.children[0] as Elem;\n}","\nexport interface FormatStringOptions {\n    subst: {\n        format: string;\n        var: string;\n    }\n}\n\nexport function escapeRegExp(text: string) {\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\nexport function formatString(\n        text: string,\n        dict: Record<string, any>,\n        { subst = { format: \"${{ | }}\", var: \"|\" } }: Partial<FormatStringOptions> = {}): string\n{\n    const substRegex = subst.format\n        .split(subst.var)\n        .map(escapeRegExp)\n        .join(String.raw`([$\\w\\d-_.: ]+)`);\n    return text.replace(new RegExp(substRegex, \"g\"), (_, varKey) => dict[varKey]?.toString());\n}","\nimport { Task, Tasker } from \"tasker\";\n\nexport class TaskerUnreponsiveError extends Error {\n    name = this.constructor.name;\n    tasker: Tasker;\n\n    constructor (tasker: Tasker) {\n        super(`worker is unresponsive`);\n        this.tasker = tasker;\n    }\n}\n\nexport class TaskerScriptError extends Error {\n    name = this.constructor.name;\n    tasker: Tasker;\n\n    constructor (tasker: Tasker, error: any) {\n        super(`script error caused by worker (${error.name})`);\n        this.tasker = tasker;\n        this.cause = error;\n    }\n}\n\nexport class TaskerDeadState extends Error {\n    name = this.constructor.name;\n    tasker: Tasker;\n\n    constructor (tasker: Tasker, state: string) {\n        super(`worker is in dead state (${state})`)\n        this.tasker = tasker;\n    }\n}\n\nexport class TaskNotFound extends Error {\n    name = this.constructor.name;\n    tasker: Tasker;\n    task: Task<any>;\n\n    constructor (tasker: Tasker, job: Task<any>) {\n        super(\"job not found in worker\");\n        this.tasker = tasker;\n        this.task = job;\n    }\n}","\nimport type {\n    AwaitMessageOptions,\n    ChildMessage,\n    ChildMessageTaskError,\n    ChildMessageTaskFulfilled,\n    ChildMessageStatus,\n    Task,\n    TaskerOptions,\n    ParentMessage,\n    ParentMessageClose,\n    ParentMessageTaskExecute,\n    ParentMessageResume,\n    ParentMessageSuspend,\n    ChildMessageMap,\n} from \"./tasker-types\";\n\nimport {\n    TaskNotFound,\n    TaskerDeadState,\n    TaskerScriptError,\n    TaskerUnreponsiveError\n} from \"./tasker-errors\";\n\nexport * from \"./tasker-types\";\nexport * from \"./tasker-errors\";\n\nexport class TaskFulfilledEvent extends Event {\n    task: Task<any>;\n    result: any;\n\n    constructor ({ task, result }: { task: Task<any>, result: any }, options?: EventInit) {\n        super(\"task_fulfilled\", options);\n        this.task = task;\n        this.result = result;\n    }\n}\n\nexport class TaskErrorEvent extends Event {\n    task: Task<any>;\n    error: any;\n\n    constructor ({ task, error }: { task: Task<any>, error: any }, options?: EventInit) {\n        super(\"task_error\", options);\n        this.task = task;\n        this.error = error;\n    }\n}\n\nfunction workerLoop() {\n    let state: Tasker[\"status\"] = \"idling\";\n\n    function runTask(data: ParentMessageTaskExecute) {\n        state = \"working\";\n        const callback = eval(`(${data.callbackCode})`);\n        const args = data.args;\n\n        try {\n            const returnValue = callback(...args);\n            if (returnValue instanceof Promise) {\n                returnValue.then(returnValue => {\n                    self.postMessage({\n                        type: \"task_fulfilled\",\n                        returnValue,\n                    } satisfies ChildMessageTaskFulfilled);\n                }).catch(error => {\n                    self.postMessage({\n                        type: \"task_error\",\n                        error,\n                    } satisfies ChildMessageTaskError);\n                });\n            }\n            else {\n                self.postMessage({\n                    type: \"task_fulfilled\",\n                    returnValue,\n                } satisfies ChildMessageTaskFulfilled);\n            }\n        }\n        catch (error) {\n            self.postMessage({\n                type: \"task_error\",\n                error,\n            } satisfies ChildMessageTaskError);\n        }\n        state = \"idling\";\n    }\n\n    self.addEventListener(\"message\", (ev) => {\n        const data = ev.data as ParentMessage;\n\n        switch (data.type) {\n        case \"status\":\n            self.postMessage({\n                type: \"status\",\n                status: state\n            } satisfies ChildMessageStatus);\n            break;\n        case \"resume\":\n            state = \"idling\";\n            break;\n        }\n\n        if (state == \"suspended\") return;\n\n        switch (data.type) {\n        case \"task_execute\":\n            runTask(data);\n            break;\n        case \"suspend\":\n            state = \"suspended\";\n            break;\n        case \"shutdown\":\n            state = \"shutdown\";\n            \n            self.postMessage({\n                type: \"status\",\n                status: \"shutdown\"\n            } satisfies ChildMessageStatus);\n\n            self.close();\n            break;\n        }\n    });\n}\n\n/**\n * Tasker is a task-based wrapper around {@link Worker} from Web Worker API.\n * \n * Tasker works by executing the latest task from the queue, and then the next one until there is no more on the task list.\n * \n * Task contains callback and arguments that are later evaluated in the worker enviroment.\n * \n * Functions are passed between worker using `toString` API, and then are evaluated in the worker enviroment.\n * \n * Variables from `window` or the main enviroment are not available in worker. You can pass them to the worker using Tasker `setVariable` method.\n * \n * Functions and variables passed from window to worker are cloned or evaluated, and cannot be passed by reference.\n * \n * Data cloning method may use `structuredClone` and `eval` function from the web API.\n */\nexport class Tasker extends EventTarget {\n    static readonly scriptUrl = `data:text/javascript;charset=utf-8,(${workerLoop.toString()}).call(this)`;\n\n    static createTask<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Readonly<Task<Result, Args>> {\n        return {\n            callback,\n            args: (args ?? []) as Args\n        };\n    }\n\n    #taskQueue: Task<any>[] = [];\n    #currentlyExecutingTask: Task<any> | null = null;\n    #worker: Worker;\n    #state: \"idling\" | \"working\" | \"suspended\" | \"shutdown\" | \"terminated\" | \"error\" = \"idling\";\n\n    get worker() {\n        return this.#worker;\n    }\n\n    set worker(worker: Worker) {\n        this.reinit(worker);\n    }\n\n    /**\n     * Returns Tasker status.\n     * \n     * There are 6 Tasker status available:\n     * - `idling` - Tasker is doing nothing.\n     * - `working` - Tasker is executing remaining task in the queue.\n     * - `suspended` - Tasker is executing a task once in the queue, and then no longer accept new task. Tasks that are not executed still remain in the queue.\n     * - `shutdown` - Tasker is executing a task once in the queue, and then the `Worker` is closed. It will not execute remaining task in the queue. Same as \"suspended\", the tasks in the queue still remain.\n     * - `terminated` - Tasker is immediately terminated, abandoning the task its executing. It will not execute remaining task in the queue. Same as \"suspended\", the tasks in the queue still remain.\n     * - `error` - The last task Tasker executed throws an error, but still continuing remaining tasks.\n     */\n    get status() {\n        return this.#state;\n    }\n\n    constructor ({ url }: Partial<TaskerOptions> = {}) {\n        super();\n\n        this.#worker = new Worker(url ?? Tasker.scriptUrl);\n\n        this.work();\n    }\n\n    work() {\n        if (this.#state == \"idling\" && this.#taskQueue.length > 0) {\n            this.#state = \"working\";\n            const task = this.#currentlyExecutingTask = this.#taskQueue.pop()!;\n            const callback = () => {\n                this.#state = \"idling\";\n                this.#currentlyExecutingTask = null;\n                this.work();\n            };\n\n            this.execute(task).then(callback).catch(callback);\n        }\n    }\n\n    terminate() {\n        this.#worker.terminate();\n        this.#state = \"terminated\";\n    }\n    \n    reinit(worker?: Worker) {\n        worker ??= new Worker(Tasker.scriptUrl);\n        this.terminate();\n        this.#state = \"idling\";\n        this.#worker = worker;\n        this.work();\n    }\n\n    async shutdown() {\n        this.#worker.postMessage({\n            type: \"shutdown\"\n        } satisfies ParentMessageClose);\n\n        return this.awaitMessage({ type: \"status\", test: (message) => message.status == \"shutdown\" }).then(result => {\n            this.#state = \"shutdown\";\n            return result;\n        });\n    }\n\n    async restart(worker?: Worker) {\n        worker ??= new Worker(Tasker.scriptUrl);\n        await this.shutdown();\n        this.#state = \"idling\";\n        this.#worker = worker;\n        this.work();\n    }\n\n    async suspend() {\n        this.#worker.postMessage({\n            type: \"suspend\"\n        } satisfies ParentMessageSuspend);\n\n        this.#state = \"suspended\";\n\n        return this.awaitMessage({ type: \"status\", test: message => message.status == \"suspended\" });\n    }\n\n    async resume() {\n        this.#worker.postMessage({\n            type: \"resume\"\n        } satisfies ParentMessageResume);\n\n        return this.awaitMessage({ type: \"status\", test: message => message.status == \"idling\" }).then(result => {\n            this.#state = \"idling\";\n            this.work();\n            return result;\n        });\n    }\n\n    async execute<Result>(task: Task<Result>): Promise<Result> {\n        const data: ParentMessageTaskExecute = {\n            type: \"task_execute\",\n            callbackCode: task.callback.toString(),\n            args: task.args\n        };\n\n        this.#worker.postMessage(data);\n\n        const messageExecutionResult = await this.awaitMessage<ChildMessageTaskFulfilled | ChildMessageTaskError>({\n            test: (message) => message.type == \"task_fulfilled\" || message.type == \"task_error\"\n        });\n\n        if (messageExecutionResult.type == \"task_fulfilled\") {\n            const event = new TaskFulfilledEvent({ task, result: messageExecutionResult.returnValue });\n            this.dispatchEvent(event);\n            return messageExecutionResult.returnValue;\n        }\n        else {\n            const taskerScriptError = new TaskerScriptError(this, messageExecutionResult.error);\n            const event = new TaskErrorEvent({ task, error: taskerScriptError });\n            this.dispatchEvent(event);\n            throw taskerScriptError;\n        }\n    }\n\n    async run<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Promise<Result> {\n        const task = this.queue(callback, args);\n        return this.awaitTask(task);\n    }\n\n    queue<TTask extends Task<any>>(task: TTask): Readonly<TTask>;\n    queue<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Readonly<Task<Result, Args>>;\n    queue(arg0: any, arg1?: any)\n    {\n        if (!(this.#state == \"idling\" || this.#state == \"working\")) throw new TaskerDeadState(this, this.#state);\n\n        let task: Task<any>;\n        \n        if (typeof arg0 == \"function\") {\n            task = Tasker.createTask(arg0, arg1);\n        }\n        else {\n            task = arg0;\n        }\n\n        this.#taskQueue.push(task);\n\n        this.work();\n\n        return task;\n    }\n\n    remove(task: Task<any>) {\n        const taskIndex = this.#taskQueue.indexOf(task);\n\n        if (taskIndex == -1) {\n            throw new TaskNotFound(this, task);\n        }\n        else {\n            this.#taskQueue.splice(taskIndex, 1);\n            return true;\n        }\n    }\n\n    clearQueue() {\n        this.#taskQueue.length = 0;\n    }\n\n    awaitMessage<T extends keyof ChildMessageMap>(options: { type: T | T[] } & Partial<AwaitMessageOptions<ChildMessageMap[T]>>): Promise<ChildMessageMap[T]>;\n    awaitMessage<Message extends ChildMessage>(options: Partial<AwaitMessageOptions<Message>>): Promise<Message>;\n    awaitMessage<Message extends ChildMessage>({ type, test, timeout = 50_000 }: Partial<AwaitMessageOptions> = {}): Promise<Message> {\n        return new Promise(resolve => {\n            let timeoutId: NodeJS.Timeout;\n\n            this.#worker.addEventListener(\"message\", (ev) => {\n                const childMessage: ChildMessage = ev.data;\n                if (type) {\n                    if ((Array.isArray(type) && !type.includes(childMessage.type))\n                    || (childMessage.type != type)) {\n                        return;\n                    }\n                }\n                if (test) {\n                    if (!test(childMessage)) {\n                        return;\n                    }\n                }\n                if (timeoutId) clearTimeout(timeoutId);\n                resolve(childMessage as Message);\n            }, { once: true });\n\n            if (typeof timeout == \"number\") {\n                timeoutId = setTimeout(() => {\n                    throw new TaskerUnreponsiveError(this);\n                }, timeout);\n            }\n        });\n    }\n\n    awaitTask<Result>(task: Task<Result>): Promise<Result> {\n        if (!this.#taskQueue.includes(task) && this.#currentlyExecutingTask != task) throw new TaskNotFound(this, task);\n\n        return new Promise((resolve, reject) => {\n            this.addEventListener(\"task_fulfilled\", (ev: any) => {\n                const event = ev as TaskFulfilledEvent;\n                if (event.task == task) {\n                    resolve(event.result);\n                }\n            }, { once: true });\n            this.addEventListener(\"task_error\", (ev: any) => {\n                const event = ev as TaskErrorEvent;\n                if (event.task == task) {\n                    reject(event.error);\n                }\n            }, { once: true });\n        });\n    }\n}","\n/**\n * Configuration used for {@link observeMutation} and {@link MutationObserver}.\n */\nexport interface ObserveMutationOptions extends MutationObserverInit {\n    /**\n     * Target node for mutation observer. This will be used for `MutationObserver.observe`.\n     */\n    target: Node;\n    /**\n     * Abort signal used for disconnecting mutation observer.\n     * \n     * If abort signal is aborted, then mutation observer is disconnected.\n     */\n    abortSignal?: AbortSignal;\n    /**\n     * This will make mutation observer disconnect after detecting mutation once.\n     */\n    once?: boolean;\n}\n\nexport type ObserveMutationCallback = (info: { records: MutationRecord[], observer: MutationObserver }) => void;\n\n/**\n* Create a new `MutationObserver` with options and callback.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutation({ target, abortSignal, once, ...options }: ObserveMutationOptions, callback: ObserveMutationCallback): MutationObserver {\n   const observer = new MutationObserver(records => {\n        if (once) observer.disconnect();\n        callback({ records, observer });\n   });\n\n   observer.observe(target, options);\n\n   abortSignal?.addEventListener(\"abort\", () => {\n       observer.disconnect();\n   });\n\n   return observer;\n}\n\n/**\n* Create a new `MutationObserver` that only executes once.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutationOnce(options: ObserveMutationOptions, callback: ObserveMutationCallback): MutationObserver {\n    return observeMutation({ once: true, ...options }, callback);\n}\n\n/**\n* Create a new `MutationObserver` asyncronously that only executes once.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutationAsync({ target, abortSignal, ...options }: ObserveMutationOptions, callback: ObserveMutationCallback): Promise<{ records: MutationRecord[], observer: MutationObserver }> {\n    return new Promise(resolve => {\n        const observer = new MutationObserver(records => {\n            observer.disconnect();\n            resolve({ records, observer });\n        });\n\n        observer.observe(target, options);\n\n        abortSignal?.addEventListener(\"abort\", () => {\n            observer.disconnect();\n        });\n    });\n}\n\nexport const makeMutationObserver = observeMutation;","\nexport class WaitForElementTimeoutError extends Error {\n    name = this.constructor.name;\n\n    constructor (ms: number) {\n        super(`wait for element timeout for ${ms}ms`);\n    }\n}\n\nexport class WaitForElementMaxTriesError extends Error {\n    name = this.constructor.name;\n\n    constructor (maxTries: number) {\n        super(`wait for element out of tries (max tries: ${maxTries})`);\n    }\n}\n\nexport class WaitForElementMissingOptionError extends Error {\n    name = this.constructor.name;\n}","\nimport {\n    WaitForElementMissingOptionError,\n    WaitForElementMaxTriesError,\n    WaitForElementTimeoutError\n} from \"./wait-for-element-errors\";\n\nimport { observeMutation } from \"./mutation-observer\";\n\nexport type QueryFnDefault<QueryFnResult> = (parent: ParentNode, selector: string) => QueryFnResult | null;\n\nexport type QueryOptions<QueryFnResult, QueryFn extends QueryFnDefault<QueryFnResult> = QueryFnDefault<QueryFnResult>> =\n    ({\n        /** Set to ID selector that the operation will query select.\n         * \n         * If `id` and/or `selector` is not set, then it will throw {@link WaitForElementMissingOptionError}.\n         * \n         * @see {@link document.getElementById}\n         */\n        id: string;\n    } | {\n        /**\n         * Set to valid selector that the operation will query select.\n         * \n         * If `id` and/or `selector` is not set, then it will throw {@link WaitForElementMissingOptionError}.\n         * \n         * @see {@link document.querySelector} \n         */\n        selector: string;\n    })\n    & {\n        /**\n         * Set to parent node that the operation will be query select from.\n         * \n         * This will also set mutation observer's target.\n         * \n         * By default, it will set to {@link document.documentElement}.\n         */\n        parent?: ParentNode;\n        /**\n         * Set to element or an operation that will be used for query selecting.\n         * \n         * Can be set to {@link document.querySelector} or {@link document.querySelectorAll}.\n         * \n         * By default, it will set to {@link document.querySelector}.\n         * \n         * @see {@link document.querySelector}\n         * @see {@link QueryOptions.parent}\n         */\n        querySelector?: QueryFn;\n        /**\n         * Set to abort signal from {@link AbortController} that will be used to abort the operation.\n         * \n         * @see {@link AbortController}\n         */\n        abortSignal?: AbortSignal;\n        /**\n         * Set to milliseconds that will be used to timeout the operation.\n         * \n         * If operation has timeout, then it will throw {@link WaitForElementTimeoutError}.\n         * \n         * Set to `false` to disable timeout feature.\n         * \n         * By default, it will set to `10_000` milliseconds.\n         * \n         * @see {@link setTimeout}\n         */\n        timeout?: number | false;\n        /**\n         * Set to number which will determine how much the operation can be restarted.\n         * \n         * If operation has reached max tries, then it will throw {@link WaitForElementMaxTriesError}.\n         * \n         * By default, it will set to `Infinity`.\n         */\n        maxTries?: number;\n        /**\n         * Set to true if the operation will wait for `DOMContentLoaded` event.\n         * \n         * By default, it will set to `true`.\n         */\n        ensureDomContentLoaded?: boolean;\n        /**\n         * Set to mutation observer's options for the operation's mutation observer options.\n         * \n         * By default, the operation's will enable `childList` and `subtree` mutation observer option.\n         * \n         * @see {@link MutationObserverInit}\n         * @see {@link QueryOptions.parent}\n         */\n        observerOptions?: MutationObserverInit;\n    };\n\nexport async function awaitDomContentLoaded(): Promise<void> {\n    return new Promise(resolve => {\n        if (document.readyState != \"loading\") return resolve();\n        document.addEventListener(\"DOMContentLoaded\", () => resolve());\n    });\n}\n\nfunction isNotEmpty<T>(x: T): x is Exclude<T, null> {\n    if (x instanceof NodeList && x.length > 0) {\n        return true;\n    }\n    else {\n        return x != null;\n    }\n}\n\nexport async function executeQuery\n    <QueryFnResult, QueryFn extends QueryFnDefault<QueryFnResult> = QueryFnDefault<QueryFnResult>>\n    (options: QueryOptions<QueryFnResult, QueryFn>): Promise<QueryFnResult>\n{\n    let selector: string;\n    const parent = options.parent ?? document.body;\n    const querySelector: QueryFn = options.querySelector ?? ((parent, selector) => parent.querySelector(selector)) as QueryFn;\n    const maxTries = options.maxTries ?? Infinity;\n    const timeout = options.timeout ?? 10_000;\n    const ensureDomContentLoaded = options.ensureDomContentLoaded ?? true;\n\n    if (ensureDomContentLoaded) await awaitDomContentLoaded();\n\n    if (\"id\" in options) {\n        selector = `#${options.id}`;\n    }\n    else if (\"selector\" in options) {\n        selector = options.selector;\n    }\n    else {\n        throw new WaitForElementMissingOptionError(`missing options \"id\" or \"selector\"`);\n    }\n\n    let result: QueryFnResult | null = querySelector(parent, selector);\n\n    if (isNotEmpty(result)) return result;\n\n    let tries = 0;\n\n    const abortController = new AbortController;\n    const abortSignal: AbortSignal = abortController.signal;\n\n    options.abortSignal?.addEventListener(\"abort\", () => abortController.abort());\n\n    return new Promise((resolve, reject) => {\n        const mutation = observeMutation({ target: parent, abortSignal, childList: true, subtree: true, ...options.observerOptions }, () => {\n            result = querySelector(parent, selector);\n            if (isNotEmpty(result)) {\n                mutation.disconnect();\n                resolve(result);\n            }\n            else if (tries > maxTries) {\n                mutation.disconnect();\n                reject(new WaitForElementMaxTriesError(maxTries));\n            }\n            tries++;\n        });\n\n        if (timeout != false && timeout != Infinity) {\n            setTimeout(() => {\n                mutation.disconnect();\n                reject(new WaitForElementTimeoutError(timeout));\n            }, timeout);\n        }\n    });\n}\n\nexport function waitForElement<Elem extends Element>(selector: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem>;\nexport function waitForElement<Elem extends Element>(selector: string, parent: ParentNode, options?: Partial<QueryOptions<Elem>>): Promise<Elem>;\nexport function waitForElement<T extends keyof HTMLElementTagNameMap>(selector: T, options?: Partial<QueryOptions<HTMLElementTagNameMap[T]>>): Promise<HTMLElementTagNameMap[T]>;\nexport function waitForElement<T extends keyof HTMLElementTagNameMap>(selector: T, parent: ParentNode, options?: Partial<QueryOptions<HTMLElementTagNameMap[T]>>): Promise<HTMLElementTagNameMap[T]>;\nexport function waitForElement(selector: string, arg1?: any, arg2?: any): any\n{\n    let options: QueryOptions<Element>;\n\n    if (arg1 instanceof Node && \"children\" in arg1) {\n        // arg1 is ParentNode\n        options = {\n            selector,\n            parent: arg1 as ParentNode,\n            ...arg2\n        };\n    }\n    else {\n        // arg1 is QueryOptions\n        options = {\n            selector,\n            ...arg1\n        };\n    }\n\n    return executeQuery({ selector, ...options });\n}\n\nexport function waitForElementAll<Elem extends Element>(selector: string, options?: Partial<QueryOptions<NodeListOf<Elem>>>): Promise<Elem[]>;\nexport function waitForElementAll<Elems extends Element[]>(selector: string, options?: Partial<QueryOptions<NodeListOf<Element>>>): Promise<Elems>;\nexport function waitForElementAll(selector: string, options?: Partial<QueryOptions<NodeListOf<Element>>>): Promise<Element[]>\n{\n    return executeQuery<NodeListOf<Element>>({ selector, ...options }).then(i => Array.from(i));\n}\n\nexport function waitForElementParent<Elem extends Element>(parent: ParentNode, selector: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem> {\n    return executeQuery({ selector, parent, ...options });\n}\n\nexport function waitForElementId<Elem extends Element>(id: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem> {\n    return executeQuery<Elem>({ id, ...options });\n}\n\nexport function waitForElementInf<Elem extends Element>(selector: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem> {\n    return executeQuery({ selector, timeout: Infinity, ...options });\n}","// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\nconst DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';\nconst DATA_URL_DEFAULT_CHARSET = 'us-ascii';\n\nconst testParameter = (name, filters) => filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n\nconst supportedProtocols = new Set([\n\t'https:',\n\t'http:',\n\t'file:',\n]);\n\nconst hasCustomProtocol = urlString => {\n\ttry {\n\t\tconst {protocol} = new URL(urlString);\n\t\treturn protocol.endsWith(':') && !supportedProtocols.has(protocol);\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nconst normalizeDataURL = (urlString, {stripHash}) => {\n\tconst match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n\n\tif (!match) {\n\t\tthrow new Error(`Invalid URL: ${urlString}`);\n\t}\n\n\tlet {type, data, hash} = match.groups;\n\tconst mediaType = type.split(';');\n\thash = stripHash ? '' : hash;\n\n\tlet isBase64 = false;\n\tif (mediaType[mediaType.length - 1] === 'base64') {\n\t\tmediaType.pop();\n\t\tisBase64 = true;\n\t}\n\n\t// Lowercase MIME type\n\tconst mimeType = mediaType.shift()?.toLowerCase() ?? '';\n\tconst attributes = mediaType\n\t\t.map(attribute => {\n\t\t\tlet [key, value = ''] = attribute.split('=').map(string => string.trim());\n\n\t\t\t// Lowercase `charset`\n\t\t\tif (key === 'charset') {\n\t\t\t\tvalue = value.toLowerCase();\n\n\t\t\t\tif (value === DATA_URL_DEFAULT_CHARSET) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn `${key}${value ? `=${value}` : ''}`;\n\t\t})\n\t\t.filter(Boolean);\n\n\tconst normalizedMediaType = [\n\t\t...attributes,\n\t];\n\n\tif (isBase64) {\n\t\tnormalizedMediaType.push('base64');\n\t}\n\n\tif (normalizedMediaType.length > 0 || (mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE)) {\n\t\tnormalizedMediaType.unshift(mimeType);\n\t}\n\n\treturn `data:${normalizedMediaType.join(';')},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : ''}`;\n};\n\nexport default function normalizeUrl(urlString, options) {\n\toptions = {\n\t\tdefaultProtocol: 'http',\n\t\tnormalizeProtocol: true,\n\t\tforceHttp: false,\n\t\tforceHttps: false,\n\t\tstripAuthentication: true,\n\t\tstripHash: false,\n\t\tstripTextFragment: true,\n\t\tstripWWW: true,\n\t\tremoveQueryParameters: [/^utm_\\w+/i],\n\t\tremoveTrailingSlash: true,\n\t\tremoveSingleSlash: true,\n\t\tremoveDirectoryIndex: false,\n\t\tremoveExplicitPort: false,\n\t\tsortQueryParameters: true,\n\t\t...options,\n\t};\n\n\t// Legacy: Append `:` to the protocol if missing.\n\tif (typeof options.defaultProtocol === 'string' && !options.defaultProtocol.endsWith(':')) {\n\t\toptions.defaultProtocol = `${options.defaultProtocol}:`;\n\t}\n\n\turlString = urlString.trim();\n\n\t// Data URL\n\tif (/^data:/i.test(urlString)) {\n\t\treturn normalizeDataURL(urlString, options);\n\t}\n\n\tif (hasCustomProtocol(urlString)) {\n\t\treturn urlString;\n\t}\n\n\tconst hasRelativeProtocol = urlString.startsWith('//');\n\tconst isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n\n\t// Prepend protocol\n\tif (!isRelativeUrl) {\n\t\turlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n\t}\n\n\tconst urlObject = new URL(urlString);\n\n\tif (options.forceHttp && options.forceHttps) {\n\t\tthrow new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n\t}\n\n\tif (options.forceHttp && urlObject.protocol === 'https:') {\n\t\turlObject.protocol = 'http:';\n\t}\n\n\tif (options.forceHttps && urlObject.protocol === 'http:') {\n\t\turlObject.protocol = 'https:';\n\t}\n\n\t// Remove auth\n\tif (options.stripAuthentication) {\n\t\turlObject.username = '';\n\t\turlObject.password = '';\n\t}\n\n\t// Remove hash\n\tif (options.stripHash) {\n\t\turlObject.hash = '';\n\t} else if (options.stripTextFragment) {\n\t\turlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, '');\n\t}\n\n\t// Remove duplicate slashes if not preceded by a protocol\n\t// NOTE: This could be implemented using a single negative lookbehind\n\t// regex, but we avoid that to maintain compatibility with older js engines\n\t// which do not have support for that feature.\n\tif (urlObject.pathname) {\n\t\t// TODO: Replace everything below with `urlObject.pathname = urlObject.pathname.replace(/(?<!\\b[a-z][a-z\\d+\\-.]{1,50}:)\\/{2,}/g, '/');` when Safari supports negative lookbehind.\n\n\t\t// Split the string by occurrences of this protocol regex, and perform\n\t\t// duplicate-slash replacement on the strings between those occurrences\n\t\t// (if any).\n\t\tconst protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\n\n\t\tlet lastIndex = 0;\n\t\tlet result = '';\n\t\tfor (;;) {\n\t\t\tconst match = protocolRegex.exec(urlObject.pathname);\n\t\t\tif (!match) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst protocol = match[0];\n\t\t\tconst protocolAtIndex = match.index;\n\t\t\tconst intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\n\n\t\t\tresult += intermediate.replace(/\\/{2,}/g, '/');\n\t\t\tresult += protocol;\n\t\t\tlastIndex = protocolAtIndex + protocol.length;\n\t\t}\n\n\t\tconst remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\n\t\tresult += remnant.replace(/\\/{2,}/g, '/');\n\n\t\turlObject.pathname = result;\n\t}\n\n\t// Decode URI octets\n\tif (urlObject.pathname) {\n\t\ttry {\n\t\t\turlObject.pathname = decodeURI(urlObject.pathname);\n\t\t} catch {}\n\t}\n\n\t// Remove directory index\n\tif (options.removeDirectoryIndex === true) {\n\t\toptions.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n\t}\n\n\tif (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n\t\tlet pathComponents = urlObject.pathname.split('/');\n\t\tconst lastComponent = pathComponents[pathComponents.length - 1];\n\n\t\tif (testParameter(lastComponent, options.removeDirectoryIndex)) {\n\t\t\tpathComponents = pathComponents.slice(0, -1);\n\t\t\turlObject.pathname = pathComponents.slice(1).join('/') + '/';\n\t\t}\n\t}\n\n\tif (urlObject.hostname) {\n\t\t// Remove trailing dot\n\t\turlObject.hostname = urlObject.hostname.replace(/\\.$/, '');\n\n\t\t// Remove `www.`\n\t\tif (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\n\t\t\t// Each label should be max 63 at length (min: 1).\n\t\t\t// Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n\t\t\t// Each TLD should be up to 63 characters long (min: 2).\n\t\t\t// It is technically possible to have a single character TLD, but none currently exist.\n\t\t\turlObject.hostname = urlObject.hostname.replace(/^www\\./, '');\n\t\t}\n\t}\n\n\t// Remove query unwanted parameters\n\tif (Array.isArray(options.removeQueryParameters)) {\n\t\t// eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n\t\tfor (const key of [...urlObject.searchParams.keys()]) {\n\t\t\tif (testParameter(key, options.removeQueryParameters)) {\n\t\t\t\turlObject.searchParams.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\n\t\turlObject.search = '';\n\t}\n\n\t// Keep wanted query parameters\n\tif (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\n\t\t// eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n\t\tfor (const key of [...urlObject.searchParams.keys()]) {\n\t\t\tif (!testParameter(key, options.keepQueryParameters)) {\n\t\t\t\turlObject.searchParams.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Sort query parameters\n\tif (options.sortQueryParameters) {\n\t\turlObject.searchParams.sort();\n\n\t\t// Calling `.sort()` encodes the search parameters, so we need to decode them again.\n\t\ttry {\n\t\t\turlObject.search = decodeURIComponent(urlObject.search);\n\t\t} catch {}\n\t}\n\n\tif (options.removeTrailingSlash) {\n\t\turlObject.pathname = urlObject.pathname.replace(/\\/$/, '');\n\t}\n\n\t// Remove an explicit port number, excluding a default port number, if applicable\n\tif (options.removeExplicitPort && urlObject.port) {\n\t\turlObject.port = '';\n\t}\n\n\tconst oldUrlString = urlString;\n\n\t// Take advantage of many of the Node `url` normalizations\n\turlString = urlObject.toString();\n\n\tif (!options.removeSingleSlash && urlObject.pathname === '/' && !oldUrlString.endsWith('/') && urlObject.hash === '') {\n\t\turlString = urlString.replace(/\\/$/, '');\n\t}\n\n\t// Remove ending `/` unless removeSingleSlash is false\n\tif ((options.removeTrailingSlash || urlObject.pathname === '/') && urlObject.hash === '' && options.removeSingleSlash) {\n\t\turlString = urlString.replace(/\\/$/, '');\n\t}\n\n\t// Restore relative protocol, if applicable\n\tif (hasRelativeProtocol && !options.normalizeProtocol) {\n\t\turlString = urlString.replace(/^http:\\/\\//, '//');\n\t}\n\n\t// Remove http/https\n\tif (options.stripProtocol) {\n\t\turlString = urlString.replace(/^(?:https?:)?\\/\\//, '');\n\t}\n\n\treturn urlString;\n}\n","\nimport normalizeUrl from 'normalize-url';\n\nexport type Matcher = string | RegExp | URL | true;\n\nexport function urlMatches(matcher: Matcher, url?: string) {\n    let result = false;\n\n    if (url == null) return false;\n    if (matcher === true) return true;\n    \n    url = normalizeUrl(url);\n\n    if (matcher instanceof URL) {\n        result = normalizeUrl(matcher.href) == url;\n    }\n    if (typeof matcher == \"string\") {\n        result = normalizeUrl(matcher) == url;\n    }\n    if (matcher instanceof RegExp) {\n        result = matcher.test(url);\n    }\n\n    return result;\n}\n\nexport function headersMatches(headerMatchers: Record<string, Matcher>, headers: Headers) {\n    let result = false;\n\n    const headerMatchersKeys = Object.keys(headerMatchers);\n\n    if (headerMatchersKeys.length == 0) return true;\n\n    for (const key of Object.keys(headerMatchers)) {\n        const matcher = headerMatchers[key];\n        const headerValue = headers.get(key);\n        \n        if (headerValue == null) return false;\n        if (matcher === true) return true;\n\n        if (matcher instanceof URL) {\n            result = normalizeUrl(matcher.href) == normalizeUrl(headerValue);\n        }\n        else if (matcher instanceof RegExp) {\n            result = matcher.test(headerValue);\n        }\n        else {\n            result = String(matcher) == headerValue;\n        }\n\n        if (!result) return false;\n    }\n\n    return result;\n}","\nimport { Matcher, urlMatches, headersMatches } from \"./network\";\n\nexport interface RequestRule {\n    type: \"request\";\n    url: Matcher;\n    headers?: Record<string, Matcher>;\n    block?: boolean;\n    redirect?: URL | string | false;\n    callback: (request: InterceptedRequest) => void;\n}\n\nexport interface ResponseRule {\n    type: \"response\";\n    url: Matcher;\n    headers?: Record<string, Matcher>;\n    callback: (response: InterceptedResponse) => void;\n}\n\nexport interface InterceptedRequest extends Request {\n    blocked: boolean;\n}\n\nexport interface InterceptedResponse extends Response {}\n\nexport type RuleMap = {\n    request: RequestRule;\n    response: ResponseRule;\n};\n\nexport type Rule = RequestRule | ResponseRule;\n\nfunction fetchInterceptorFactory(interceptor: NetworkInterceptor, windowFetch: typeof window.fetch) {\n    return async function fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response> {\n        const request = new Request(input, init);\n        const interceptedRequest = interceptor.interceptRequest(request);\n\n        if (interceptedRequest.blocked) {\n            const responseError = Response.error();\n            return responseError;\n        }\n        else {\n            return windowFetch(interceptedRequest).then(res => {\n                const interceptedResponse = interceptor.interceptResponse(res);\n                return interceptedResponse;\n            });\n        }\n    }\n}\n\nfunction xmlHttpRequestInterceptorFactory(interceptor: NetworkInterceptor, windowXmlHttpRequest: typeof window.XMLHttpRequest) {\n    class XMLHttpRequest extends windowXmlHttpRequest {\n        #headers = new Headers;\n\n        constructor () {\n            super();\n            this.addEventListener(\"load\", () => {\n                const options: ResponseInit = {\n                    status: this.status,\n                    statusText: this.statusText,\n                    headers: this.#headers,\n                };\n            });\n        }\n\n        setRequestHeader(name: string, value: string): void {\n            this.#headers.set(name, value);\n            super.setRequestHeader(name, value);\n        }\n    }\n    return windowXmlHttpRequest;\n}\n\nexport interface NetworkInterceptorOptions {\n    global: Record<string, any>;\n    fetchKey: string;\n    xmlHttpRequestKey: string;\n}\n\nexport class NetworkInterceptor {\n    #requestRules: Required<RequestRule>[] = [];\n    #responseRules: Required<ResponseRule>[] = [];\n    #windowFetch: typeof window.fetch;\n    #patchedFetch: typeof window.fetch;\n    #windowXmlHttpRequest: typeof window.XMLHttpRequest;\n    #patchedXmlHttpRequest: typeof window.XMLHttpRequest;\n\n    get windowFetch() {\n        return this.#windowFetch;\n    }\n\n    get patchedFetch() {\n        return this.#patchedFetch;\n    }\n\n    constructor ({ global = globalThis, fetchKey = \"fetch\", xmlHttpRequestKey = \"XMLHttpRequest\" }: Partial<NetworkInterceptorOptions> = {}) {\n        this.#windowFetch = global[fetchKey];\n        this.#patchedFetch = global[fetchKey] = fetchInterceptorFactory(this, this.#windowFetch);\n        this.#windowXmlHttpRequest = global[xmlHttpRequestKey];\n        this.#patchedXmlHttpRequest = global[xmlHttpRequestKey] /* = xmlHttpRequestInterceptorFactory(this, this.#windowXmlHttpRequest) */;\n    }\n\n    interceptRequest(request: Request): InterceptedRequest {\n        let interceptedRequest = request as InterceptedRequest;\n        interceptedRequest.blocked = false;\n\n        for (const rule of this.#requestRules) {\n            const filterPass = urlMatches(rule.url, interceptedRequest.url) && headersMatches(rule.headers, interceptedRequest.headers);\n\n            if (!filterPass) continue;\n\n            if (rule.block) {\n                interceptedRequest.blocked = true;\n                break;\n            }\n\n            if (rule.redirect) {\n                interceptedRequest = new Request(rule.redirect, interceptedRequest) as InterceptedRequest;\n                interceptedRequest.blocked = false;\n            }\n\n            rule.callback(interceptedRequest);\n\n            if (interceptedRequest.blocked) {\n                break;\n            }\n        }\n\n        return interceptedRequest;\n    }\n\n    interceptResponse(response: Response): InterceptedResponse {\n        const interceptedResponse = response as InterceptedResponse;\n\n        for (const rule of this.#responseRules) {\n            const filterPass = urlMatches(rule.url, interceptedResponse.url) && headersMatches(rule.headers, interceptedResponse.headers);\n\n            if (!filterPass) continue;\n\n            rule.callback(interceptedResponse);\n        }\n\n        return interceptedResponse;\n    }\n\n    addRule(rule: RequestRule | ResponseRule): Readonly<Rule>;\n    addRule<T extends keyof RuleMap>\n        (type: T, url: Matcher, callback: RuleMap[T][\"callback\"], rule?: Omit<RuleMap[T], \"url\" | \"callback\">): Readonly<Rule>;\n    addRule\n        (type: string, url: Matcher, callback: (resource: InterceptedRequest | InterceptedResponse) => void, rule?: Omit<Rule, \"url\" | \"callback\">): Readonly<Rule>;\n    addRule(arg0: any, arg1?: any, arg2?: any, arg3?: any): Readonly<Rule> {\n        let rule: Rule;\n\n        if (arg0.constructor == Object) {\n            rule = arg0;\n\n            if (!rule.type) {\n                throw new TypeError(\"missing type option\");\n            }\n    \n            if (!rule.callback) {\n                throw new TypeError(\"missing callback option\");\n            }\n        }\n        else {\n            const type: string = arg0;\n            const url: Matcher = arg1;\n            const callback: Function = arg2;\n\n            rule = {\n                type, url, callback,\n                ...arg3\n            } satisfies Rule;\n        }\n\n        rule.headers ??= {};\n\n        if (rule.type == \"request\") {\n            this.#requestRules.push(rule as Required<RequestRule>);\n        }\n        else if (rule.type == \"response\") {\n            this.#responseRules.push(rule as Required<ResponseRule>);\n        }\n\n        return rule;\n    }\n\n    removeRule(rule: Rule) {\n        if (rule.type == \"request\") {\n            const ruleIndex = this.#requestRules.findIndex(r => r == rule);\n            this.#requestRules.splice(ruleIndex, 1);\n        }\n        else {\n            const ruleIndex = this.#responseRules.findIndex(r => r == rule);\n            this.#responseRules.splice(ruleIndex, 1);\n        }\n    }\n\n    clearRules() {\n        this.#requestRules.length = 0;\n        this.#responseRules.length = 0;\n    }\n\n    patchFetch(): void {\n        window.fetch = this.#patchedFetch;\n    }\n\n    restoreFetch(): void {\n        window.fetch = this.#windowFetch;\n    }\n}"],"names":["text","s","template","subst","completeString","i","elem","dict","substRegex","_","varKey","_a","tasker","__publicField","error","state","job","task","result","options","returnValue","ev","data","_taskQueue","_currentlyExecutingTask","_worker","_state","_Tasker","url","__privateAdd","__privateSet","callback","args","__privateGet","worker","message","messageExecutionResult","event","taskerScriptError","arg0","arg1","taskIndex","type","test","timeout","resolve","timeoutId","childMessage","reject","target","abortSignal","once","observer","records","ms","maxTries","x","selector","parent","querySelector","tries","abortController","mutation","arg2","id","name","filters","filter","urlString","protocol","stripHash","match","hash","mediaType","isBase64","mimeType","normalizedMediaType","attribute","key","value","string","hasRelativeProtocol","urlObject","protocolRegex","lastIndex","protocolAtIndex","intermediate","remnant","pathComponents","lastComponent","oldUrlString","matcher","headerMatchers","headers","headerValue","interceptor","windowFetch","input","init","request","interceptedRequest","res","_requestRules","_responseRules","_windowFetch","_patchedFetch","_windowXmlHttpRequest","_patchedXmlHttpRequest","global","fetchKey","xmlHttpRequestKey","rule","response","interceptedResponse","arg3","ruleIndex","r"],"mappings":"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","x_google_ignoreList":[7]}