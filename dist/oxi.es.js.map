{"version":3,"file":"oxi.es.js","sources":["../src/html.ts","../src/format.ts","../src/worker-errors.ts","../src/worker.ts","../src/mutation-observer.ts","../src/wait-for-element-errors.ts","../src/wait-for-element.ts"],"sourcesContent":["\n\nexport const HTMLEntityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n} as const;\n\nexport function escapeHTML(text: string) {\n    return text.replace(/[&<>\"'`=\\/]/g, (s) => HTMLEntityMap[s as keyof typeof HTMLEntityMap]);\n}\n  \nexport function html<Elem extends Element>(template: readonly string[], ...subst: any[]): Elem {\n    const completeString = [];\n\n    for (let i = 0; i < template.length; i++) {\n        completeString.push(template[i]);\n        if (subst[i]) completeString.push(escapeHTML(String(subst[i])));\n    }\n\n    return fromHTML<Elem>(completeString.join(\"\"));\n}\n\nexport function fromHTML<Elem extends Element>(text: string): Elem {\n    const elem = document.createElement(\"div\");\n    elem.innerHTML = text;\n    setTimeout(() => elem.remove());\n    return elem.children[0] as Elem;\n}","\nexport interface FormatStringOptions {\n    subst: {\n        format: string;\n        var: string;\n    }\n}\n\nexport function escapeRegExp(text: string) {\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\nexport function formatString(\n        text: string,\n        dict: Record<string, any>,\n        { subst = { format: \"${{ | }}\", var: \"|\" } }: Partial<FormatStringOptions> = {}): string\n{\n    const substRegex = subst.format\n        .split(subst.var)\n        .map(escapeRegExp)\n        .join(String.raw`([$\\w\\d-_.: ]+)`);\n    return text.replace(new RegExp(substRegex, \"g\"), (_, varKey) => dict[varKey]?.toString());\n}","\nimport { Job, WorkerJQ } from \"worker\";\n\nexport class WorkerUnreponsiveError extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n\n    constructor (worker: WorkerJQ) {\n        super(`worker is unresponsive`);\n        this.worker = worker;\n    }\n}\n\nexport class WorkerScriptError extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n\n    constructor (worker: WorkerJQ, error: any) {\n        super(`script error caused by worker (${error.name})`);\n        this.worker = worker;\n        this.cause = error;\n    }\n}\n\nexport class WorkerDeadState extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n\n    constructor (worker: WorkerJQ, state: string) {\n        super(`worker is in dead state (${state})`)\n        this.worker = worker;\n    }\n}\n\nexport class JobNotFound extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n    job: Job<any>;\n\n    constructor (worker: WorkerJQ, job: Job<any>) {\n        super(\"job not found in worker\");\n        this.worker = worker;\n        this.job = job;\n    }\n}","\nimport type {\n    AwaitMessageInit,\n    ChildMessage,\n    ChildMessageExecutionResultError,\n    ChildMessageExecutionResultSuccess,\n    ChildMessageStatus,\n    Job,\n    WorkerJQOptions,\n    ParentMessage,\n    ParentMessageClose,\n    ParentMessageExecution,\n    ParentMessageExecutionAsync,\n    ParentMessageResume,\n    ParentMessageSuspend,\n} from \"./worker-types\";\n\nimport {\n    JobNotFound,\n    WorkerDeadState,\n    WorkerScriptError,\n    WorkerUnreponsiveError\n} from \"./worker-errors\";\n\nexport * from \"./worker-types\";\nexport * from \"./worker-errors\";\n\nexport class JobDoneEvent extends Event {\n    job: Job<any>;\n    result: any;\n\n    constructor ({ job, result }: { job: Job<any>, result: any }, options?: EventInit) {\n        super(\"job-done\", options);\n        this.job = job;\n        this.result = result;\n    }\n}\n\nfunction workerLoop() {\n    let state: WorkerJQ[\"state\"] = \"idling\";\n\n    function executeParentCode(data: ParentMessageExecution | ParentMessageExecutionAsync) {\n        state = \"working\";\n        const callback = eval(`(${data.functionCode})`);\n        const args = data.args;\n\n        try {\n            const returnValue = callback(...args);\n            self.postMessage({\n                type: \"execution_result\",\n                success: true,\n                returnValue,\n            } satisfies ChildMessageExecutionResultSuccess);\n        }\n        catch (error) {\n            self.postMessage({\n                type: \"execution_result\",\n                success: false,\n                error,\n            } satisfies ChildMessageExecutionResultError);\n        }\n        state = \"idling\";\n    }\n    \n    async function executeParentCodeAsync(data: ParentMessageExecutionAsync) {\n        state = \"working\";\n        const callback = eval(`(${data.functionCode})`) as (...args: any[]) => Promise<any>;\n        const args = data.args;\n\n        callback(...args)\n            .then(returnValue => {\n                self.postMessage({\n                    type: \"execution_result\",\n                    success: true,\n                    returnValue,\n                } satisfies ChildMessageExecutionResultSuccess);\n                state = \"idling\";\n            })\n            .catch(error => {\n                self.postMessage({\n                    type: \"execution_result\",\n                    success: false,\n                    error,\n                } satisfies ChildMessageExecutionResultError);\n                state = \"idling\";\n            });\n    }\n    \n    self.addEventListener(\"message\", (ev) => {\n        const data = ev.data as ParentMessage;\n\n        switch (data.type) {\n        case \"status\":\n            self.postMessage({\n                type: \"status\",\n                status: state\n            } satisfies ChildMessageStatus);\n            break;\n        case \"resume\":\n            state = \"idling\";\n            break;\n        }\n\n        if (state == \"suspended\") return;\n\n        switch (data.type) {\n        case \"execute\":\n            executeParentCode(data);\n            break;\n        case \"execute_async\":\n            if (data.shouldAwait) {\n                executeParentCodeAsync(data);\n            }\n            else {\n                executeParentCode(data);\n            }\n            break;\n        case \"suspend\":\n            state = \"suspended\";\n            break;\n        case \"shutdown\":\n            state = \"shutdown\";\n            \n            self.postMessage({\n                type: \"status\",\n                status: \"shutdown\"\n            } satisfies ChildMessageStatus);\n\n            self.close();\n            break;\n        }\n    });\n}\n\n/**\n * WorkerJQ is a queue-based wrapper around {@link Worker} from Web Worker API.\n * \n * Developer can queue multiple jobs to WorkerJQ, then the class will manage its job by executing the last job on the queue, then waiting into the next one.\n */\nexport class WorkerJQ extends EventTarget {\n    static readonly scriptUrl = `data:text/javascript;charset=utf-8,(${workerLoop.toString()}).call(this)`;\n\n    static createJob<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Readonly<Job<Result, Args>> {\n        return {\n            callback,\n            args: (args ?? []) as Args\n        };\n    }\n\n    #jobQueue: Job<any>[] = [];\n    #currentlyExecutingJob: Job<any> | null = null;\n    #worker: Worker;\n    #state: \"idling\" | \"working\" | \"suspended\" | \"shutdown\" | \"terminated\" | \"error\" = \"idling\";\n\n    constructor ({ url }: Partial<WorkerJQOptions> = {}) {\n        super();\n\n        this.#worker = new Worker(url ?? WorkerJQ.scriptUrl);\n\n        this.work();\n    }\n\n    get worker() {\n        return this.#worker;\n    }\n\n    set worker(worker: Worker) {\n        this.reinit(worker);\n    }\n\n    get state() {\n        return this.#state;\n    }\n\n    work() {\n        if (this.#state == \"idling\" && this.#jobQueue.length > 0) {\n            this.#state = \"working\";\n            const job = this.#currentlyExecutingJob = this.#jobQueue.pop()!;\n\n            this.execute(job).then(result => {\n                this.#state = \"idling\";\n                this.#currentlyExecutingJob = null;\n                const event = new JobDoneEvent({ job, result });\n                this.dispatchEvent(event);\n                this.work();\n            });\n        }\n    }\n\n    clearQueue() {\n        this.#jobQueue.length = 0;\n    }\n\n    reinit(worker?: Worker) {\n        worker ??= new Worker(WorkerJQ.scriptUrl);\n        this.terminate();\n        this.#state = \"idling\";\n        this.#worker = worker;\n        this.work();\n    }\n\n    terminate() {\n        this.#worker.terminate();\n    }\n\n    async restart(worker?: Worker) {\n        worker ??= new Worker(WorkerJQ.scriptUrl);\n        await this.shutdown();\n        this.#state = \"idling\";\n        this.#worker = worker;\n        this.work();\n    }\n\n    async shutdown() {\n        this.#worker.postMessage({\n            type: \"shutdown\"\n        } satisfies ParentMessageClose);\n\n        return this.awaitMessage({ type: \"status\", test: (message) => message.status == \"shutdown\" }).then(result => {\n            this.#state = \"shutdown\";\n            return result;\n        });\n    }\n\n    async suspend() {\n        this.#worker.postMessage({\n            type: \"suspend\"\n        } satisfies ParentMessageSuspend);\n\n        this.#state = \"suspended\";\n    }\n\n    async resume() {\n        this.#worker.postMessage({\n            type: \"resume\"\n        } satisfies ParentMessageResume);\n\n        this.#state = \"idling\";\n        this.work();\n    }\n\n    async execute<Result>(job: Job<Result>): Promise<Result> {\n        const data: ParentMessageExecution = {\n            type: \"execute\",\n            functionCode: job.callback.toString(),\n            args: job.args\n        };\n\n        this.#worker.postMessage(data);\n\n        const messageExecutionResult = await this.awaitMessage<\"execution_result\">({ type: \"execution_result\" });\n\n        if (messageExecutionResult.success) {\n            return messageExecutionResult.returnValue;\n        }\n        else {\n            throw new WorkerScriptError(this, messageExecutionResult.error);\n        }\n    }\n\n    async run<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Promise<Result> {\n        const job = this.queue(callback, args);\n        return this.awaitJobDone(job);\n    }\n\n    queue<TJob extends Job<any>>(job: TJob): Readonly<TJob>;\n    queue<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Readonly<Job<Result, Args>>;\n    queue(arg0: any, arg1?: any)\n    {\n        if (!(this.#state == \"idling\" || this.#state == \"working\")) throw new WorkerDeadState(this, this.#state);\n\n        let job: Job<any>;\n        \n        if (typeof arg0 == \"function\") {\n            job = WorkerJQ.createJob(arg0, arg1);\n        }\n        else {\n            job = arg0;\n        }\n\n        this.#jobQueue.push(job);\n\n        this.work();\n\n        return job;\n    }\n\n    remove(job: Job<any>) {\n        const jobIndex = this.#jobQueue.indexOf(job);\n\n        if (jobIndex == -1) {\n            return false;\n        }\n        else {\n            this.#jobQueue.splice(jobIndex, 1);\n            return true;\n        }\n    }\n\n    awaitMessage<Type extends ChildMessage[\"type\"]>(options: { type: Type } & Partial<AwaitMessageInit<Extract<ChildMessage, { type: Type }>>>): Promise<Extract<ChildMessage, { type: Type }>>;\n    awaitMessage<Message extends ChildMessage>({ type, test, timeout = 50_000 }: Partial<AwaitMessageInit> = {}): Promise<Message> {\n        return new Promise(resolve => {\n            let timeoutId: NodeJS.Timeout;\n\n            this.#worker.addEventListener(\"message\", (ev) => {\n                const childMessage: ChildMessage = ev.data;\n                if (type) {\n                    if (childMessage.type != type) {\n                        return;\n                    }\n                }\n                if (test) {\n                    if (!test(childMessage)) {\n                        return;\n                    }\n                }\n                if (timeoutId) clearTimeout(timeoutId);\n                resolve(childMessage as Message);\n            });\n\n            if (typeof timeout == \"number\") {\n                timeoutId = setTimeout(() => {\n                    throw new WorkerUnreponsiveError(this);\n                }, timeout);\n            }\n        });\n    }\n\n    awaitJobDone<Result>(job: Job<Result>): Promise<Result> {\n        if (!this.#jobQueue.includes(job) && this.#currentlyExecutingJob != job) throw new JobNotFound(this, job);\n\n        return new Promise(resolve => {\n            this.addEventListener(\"job-done\", (ev) => {\n                const event = ev as JobDoneEvent;\n                if (event.job == job) {\n                    resolve(event.result);\n                }\n            });\n        })\n    }\n}","\n/**\n * Configuration used for {@link observeMutation} and {@link MutationObserver}.\n */\nexport interface ObserveMutationOptions extends MutationObserverInit {\n    /**\n     * Target node for mutation observer. This will be used for `MutationObserver.observe`.\n     */\n    target: Node;\n    /**\n     * Abort signal used for disconnecting mutation observer.\n     * \n     * If abort signal is aborted, then mutation observer is disconnected.\n     */\n    abortSignal?: AbortSignal;\n    /**\n     * This will make mutation observer disconnect after detecting mutation once.\n     */\n    once?: boolean;\n}\n\nexport type ObserveMutationCallback = (info: { records: MutationRecord[], observer: MutationObserver }) => void;\n\n/**\n* Create a new `MutationObserver` with options and callback.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutation({ target, abortSignal, once, ...options }: ObserveMutationOptions, callback: ObserveMutationCallback): MutationObserver {\n   const observer = new MutationObserver(records => {\n        if (once) observer.disconnect();\n        callback({ records, observer });\n   });\n\n   observer.observe(target, options);\n\n   abortSignal?.addEventListener(\"abort\", () => {\n       observer.disconnect();\n   });\n\n   return observer;\n}\n\n/**\n* Create a new `MutationObserver` that only executes once.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutationOnce(options: ObserveMutationOptions, callback: ObserveMutationCallback): MutationObserver {\n    return observeMutation({ once: true, ...options }, callback);\n}\n\n/**\n* Create a new `MutationObserver` asyncronously that only executes once.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutationAsync({ target, abortSignal, ...options }: ObserveMutationOptions, callback: ObserveMutationCallback): Promise<{ records: MutationRecord[], observer: MutationObserver }> {\n    return new Promise(resolve => {\n        const observer = new MutationObserver(records => {\n            observer.disconnect();\n            resolve({ records, observer });\n        });\n\n        observer.observe(target, options);\n\n        abortSignal?.addEventListener(\"abort\", () => {\n            observer.disconnect();\n        });\n    });\n}\n\nexport const makeMutationObserver = observeMutation;","\nexport class WaitForElementTimeoutError extends Error {\n    name = this.constructor.name;\n\n    constructor (ms: number) {\n        super(`wait for element timeout for ${ms}ms`);\n    }\n}\n\nexport class WaitForElementMaxTriesError extends Error {\n    name = this.constructor.name;\n\n    constructor (maxTries: number) {\n        super(`wait for element out of tries (max tries: ${maxTries})`);\n    }\n}\n\nexport class WaitForElementMissingOptionError extends Error {\n    name = this.constructor.name;\n}","\nimport {\n    WaitForElementMissingOptionError,\n    WaitForElementMaxTriesError,\n    WaitForElementTimeoutError\n} from \"./wait-for-element-errors\";\n\nimport { observeMutation } from \"./mutation-observer\";\n\nexport type QueryFnDefault<QueryFnResult> = (parent: ParentNode, selector: string) => QueryFnResult | null;\n\nexport type QueryOptions<QueryFnResult, QueryFn extends QueryFnDefault<QueryFnResult> = QueryFnDefault<QueryFnResult>> =\n    ({\n        /** Set to ID selector that the operation will query select.\n         * \n         * If `id` and/or `selector` is not set, then it will throw {@link WaitForElementMissingOptionError}.\n         * \n         * @see {@link document.getElementById}\n         */\n        id: string;\n    } | {\n        /**\n         * Set to valid selector that the operation will query select.\n         * \n         * If `id` and/or `selector` is not set, then it will throw {@link WaitForElementMissingOptionError}.\n         * \n         * @see {@link document.querySelector} \n         */\n        selector: string;\n    })\n    & {\n        /**\n         * Set to parent node that the operation will be query select from.\n         * \n         * This will also set mutation observer's target.\n         * \n         * By default, it will set to {@link document.documentElement}.\n         */\n        parent?: ParentNode;\n        /**\n         * Set to element or an operation that will be used for query selecting.\n         * \n         * Can be set to {@link document.querySelector} or {@link document.querySelectorAll}.\n         * \n         * By default, it will set to {@link document.querySelector}.\n         * \n         * @see {@link document.querySelector}\n         * @see {@link QueryOptions.parent}\n         */\n        querySelector?: QueryFn;\n        /**\n         * Set to abort signal from {@link AbortController} that will be used to abort the operation.\n         * \n         * @see {@link AbortController}\n         */\n        abortSignal?: AbortSignal;\n        /**\n         * Set to milliseconds that will be used to timeout the operation.\n         * \n         * If operation has timeout, then it will throw {@link WaitForElementTimeoutError}.\n         * \n         * Set to `false` to disable timeout feature.\n         * \n         * By default, it will set to `10_000` milliseconds.\n         * \n         * @see {@link setTimeout}\n         */\n        timeout?: number | false;\n        /**\n         * Set to number which will determine how much the operation can be restarted.\n         * \n         * If operation has reached max tries, then it will throw {@link WaitForElementMaxTriesError}.\n         * \n         * By default, it will set to `Infinity`.\n         */\n        maxTries?: number;\n        /**\n         * Set to true if the operation will wait for `DOMContentLoaded` event.\n         * \n         * By default, it will set to `true`.\n         */\n        ensureDomContentLoaded?: boolean;\n        /**\n         * Set to mutation observer's options for the operation's mutation observer options.\n         * \n         * By default, the operation's will enable `childList` and `subtree` mutation observer option.\n         * \n         * @see {@link MutationObserverInit}\n         * @see {@link QueryOptions.parent}\n         */\n        observerOptions?: MutationObserverInit;\n    };\n\nexport async function awaitDomContentLoaded(): Promise<void> {\n    return new Promise(resolve => {\n        if (document.readyState != \"loading\") return resolve();\n        document.addEventListener(\"DOMContentLoaded\", () => resolve());\n    });\n}\n\nfunction isNotEmpty<T>(x: T): x is Exclude<T, null> {\n    if (x instanceof NodeList && x.length > 0) {\n        return true;\n    }\n    else {\n        return x != null;\n    }\n}\n\nexport async function executeQuery\n    <QueryFnResult, QueryFn extends QueryFnDefault<QueryFnResult> = QueryFnDefault<QueryFnResult>>\n    (options: QueryOptions<QueryFnResult, QueryFn>): Promise<QueryFnResult>\n{\n    let selector: string;\n    const parent = options.parent ?? document.body;\n    const querySelector: QueryFn = options.querySelector ?? ((parent, selector) => parent.querySelector(selector)) as QueryFn;\n    const maxTries = options.maxTries ?? Infinity;\n    const timeout = options.timeout ?? 10_000;\n    const ensureDomContentLoaded = options.ensureDomContentLoaded ?? true;\n\n    if (ensureDomContentLoaded) await awaitDomContentLoaded();\n\n    if (\"id\" in options) {\n        selector = `#${options.id}`;\n    }\n    else if (\"selector\" in options) {\n        selector = options.selector;\n    }\n    else {\n        throw new WaitForElementMissingOptionError(`missing options \"id\" or \"selector\"`);\n    }\n\n    let result: QueryFnResult | null = querySelector(parent, selector);\n\n    if (isNotEmpty(result)) return result;\n\n    let tries = 0;\n\n    const abortController = new AbortController;\n    const abortSignal: AbortSignal = abortController.signal;\n\n    options.abortSignal?.addEventListener(\"abort\", () => abortController.abort());\n\n    return new Promise((resolve, reject) => {\n        const mutation = observeMutation({ target: parent, abortSignal, childList: true, subtree: true, ...options.observerOptions }, () => {\n            result = querySelector(parent, selector);\n            if (isNotEmpty(result)) {\n                resolve(result);\n                mutation.disconnect();\n            }\n            else if (tries > maxTries) {\n                mutation.disconnect();\n                reject(new WaitForElementMaxTriesError(maxTries));\n            }\n            tries++;\n        });\n\n        if (timeout != false && timeout != Infinity) {\n            setTimeout(() => {\n                mutation.disconnect();\n                reject(new WaitForElementTimeoutError(timeout));\n            }, timeout);\n        }\n    });\n}\n\nexport function waitForElement<Elem extends Element>(selector: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem>;\nexport function waitForElement<Elem extends Element>(selector: string, parent: ParentNode, options?: Partial<QueryOptions<Elem>>): Promise<Elem>;\nexport function waitForElement(selector: string, arg1?: any, arg2?: any): any\n{\n    let options: QueryOptions<Element>;\n\n    if (arg1 instanceof Node && \"children\" in arg1) {\n        // arg1 is ParentNode\n        options = {\n            selector,\n            parent: arg1 as ParentNode,\n            ...arg2\n        };\n    }\n    else {\n        // arg1 is QueryOptions\n        options = {\n            selector,\n            ...arg1\n        };\n    }\n\n    return executeQuery({ selector, ...options });\n}\n\nexport function waitForElementAll<Elem extends Element>(selector: string, options?: Partial<QueryOptions<NodeListOf<Elem>>>): Promise<Elem[]>;\nexport function waitForElementAll<Elems extends Element[]>(selector: string, options?: Partial<QueryOptions<NodeListOf<Element>>>): Promise<Elems>;\nexport function waitForElementAll(selector: string, options?: Partial<QueryOptions<NodeListOf<Element>>>): Promise<Element[]>\n{\n    return executeQuery<NodeListOf<Element>>({ selector, ...options }).then(i => Array.from(i));\n}\n\nexport function waitForElementParent<Elem extends Element>(parent: ParentNode, selector: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem> {\n    return executeQuery({ selector, parent, ...options });\n}\n\nexport function waitForElementId<Elem extends Element>(id: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem> {\n    return executeQuery<Elem>({ id, ...options });\n}\n\nexport function waitForElementInf<Elem extends Element>(selector: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem> {\n    return executeQuery({ selector, timeout: Infinity, ...options });\n}"],"names":["text","s","template","subst","completeString","i","elem","dict","substRegex","_","varKey","_a","worker","__publicField","error","state","job","result","options","returnValue","ev","data","_jobQueue","_currentlyExecutingJob","_worker","_state","_WorkerJQ","url","__privateAdd","__privateSet","callback","args","__privateGet","event","message","messageExecutionResult","arg0","arg1","jobIndex","type","test","timeout","resolve","timeoutId","childMessage","target","abortSignal","once","observer","records","ms","maxTries","x","selector","parent","querySelector","tries","abortController","reject","mutation","arg2","id"],"mappings":";;;;;;;;;;;AAEO,MAAM,gBAAgB;AAAA,EACzB,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AACT;AAEO,SAAS,WAAWA,GAAc;AACrC,SAAOA,EAAK,QAAQ,gBAAgB,CAACC,MAAM,cAAcA,CAA+B,CAAC;AAC7F;AAEgB,SAAA,KAA2BC,MAAgCC,GAAoB;AAC3F,QAAMC,IAAiB,CAAA;AAEvB,WAASC,IAAI,GAAGA,IAAIH,EAAS,QAAQG;AAClB,IAAAD,EAAA,KAAKF,EAASG,CAAC,CAAC,GAC3BF,EAAME,CAAC,KAAGD,EAAe,KAAK,WAAW,OAAOD,EAAME,CAAC,CAAC,CAAC,CAAC;AAGlE,SAAO,SAAeD,EAAe,KAAK,EAAE,CAAC;AACjD;AAEO,SAAS,SAA+BJ,GAAoB;AACzD,QAAAM,IAAO,SAAS,cAAc,KAAK;AACzC,SAAAA,EAAK,YAAYN,GACN,WAAA,MAAMM,EAAK,OAAA,CAAQ,GACvBA,EAAK,SAAS,CAAC;AAC1B;ACzBO,SAAS,aAAaN,GAAc;AAChC,SAAAA,EAAK,QAAQ,uBAAuB,MAAM;AACrD;AAEO,SAAS,aACRA,GACAO,GACA,EAAE,OAAAJ,IAAQ,EAAE,QAAQ,YAAY,KAAK,IAAM,EAAA,IAAkC,CAAA,GACrF;AACI,QAAMK,IAAaL,EAAM,OACpB,MAAMA,EAAM,GAAG,EACf,IAAI,YAAY,EAChB,KAAK,OAAO,oBAAoB;AACrC,SAAOH,EAAK,QAAQ,IAAI,OAAOQ,GAAY,GAAG,GAAG,CAACC,GAAGC,MAAW;ADnB7D,QAAAC;ACmB6D,YAAAA,IAAAJ,EAAKG,CAAM,MAAX,gBAAAC,EAAc;AAAA,GAAU;AAC5F;ACnBO,MAAM,+BAA+B,MAAM;AAAA,EAI9C,YAAaC,GAAkB;AAC3B,UAAM,wBAAwB;AAJlC,IAAAC,EAAA,cAAO,KAAK,YAAY;AACxB,IAAAA,EAAA;AAII,SAAK,SAASD;AAAA,EAClB;AACJ;AAEO,MAAM,0BAA0B,MAAM;AAAA,EAIzC,YAAaA,GAAkBE,GAAY;AACjC,UAAA,kCAAkCA,EAAM,OAAO;AAJzD,IAAAD,EAAA,cAAO,KAAK,YAAY;AACxB,IAAAA,EAAA;AAII,SAAK,SAASD,GACd,KAAK,QAAQE;AAAA,EACjB;AACJ;AAEO,MAAM,wBAAwB,MAAM;AAAA,EAIvC,YAAaF,GAAkBG,GAAe;AAC1C,UAAM,4BAA4BA,IAAQ;AAJ9C,IAAAF,EAAA,cAAO,KAAK,YAAY;AACxB,IAAAA,EAAA;AAII,SAAK,SAASD;AAAA,EAClB;AACJ;AAEO,MAAM,oBAAoB,MAAM;AAAA,EAKnC,YAAaA,GAAkBI,GAAe;AAC1C,UAAM,yBAAyB;AALnC,IAAAH,EAAA,cAAO,KAAK,YAAY;AACxB,IAAAA,EAAA;AACA,IAAAA,EAAA;AAII,SAAK,SAASD,GACd,KAAK,MAAMI;AAAA,EACf;AACJ;ACjBO,MAAM,qBAAqB,MAAM;AAAA,EAIpC,YAAa,EAAE,KAAAA,GAAK,QAAAC,EAAA,GAA0CC,GAAqB;AAC/E,UAAM,YAAYA,CAAO;AAJ7B,IAAAL,EAAA;AACA,IAAAA,EAAA;AAII,SAAK,MAAMG,GACX,KAAK,SAASC;AAAA,EAClB;AACJ;AAEA,SAAS,aAAa;AAClB,MAAI,QAA2B;AAE/B,WAAS,kBAAkB,MAA4D;AAC3E,YAAA;AACR,UAAM,WAAW,KAAK,IAAI,KAAK,eAAe,GACxC,OAAO,KAAK;AAEd,QAAA;AACM,YAAAE,IAAc,SAAS,GAAG,IAAI;AACpC,WAAK,YAAY;AAAA,QACb,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAAA;AAAA,MAAA,CAC0C;AAAA,aAE3CL;AACH,WAAK,YAAY;AAAA,QACb,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAAA;AAAA,MAAA,CACwC;AAAA,IAChD;AACQ,YAAA;AAAA,EACZ;AAEA,iBAAe,uBAAuB,MAAmC;AAC7D,YAAA;AACR,UAAM,WAAW,KAAK,IAAI,KAAK,eAAe,GACxC,OAAO,KAAK;AAElB,aAAS,GAAG,IAAI,EACX,KAAK,CAAeK,MAAA;AACjB,WAAK,YAAY;AAAA,QACb,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAAA;AAAA,MAAA,CAC0C,GACtC,QAAA;AAAA,IAAA,CACX,EACA,MAAM,CAASL,MAAA;AACZ,WAAK,YAAY;AAAA,QACb,MAAM;AAAA,QACN,SAAS;AAAA,QACT,OAAAA;AAAA,MAAA,CACwC,GACpC,QAAA;AAAA,IAAA,CACX;AAAA,EACT;AAEK,OAAA,iBAAiB,WAAW,CAACM,MAAO;AACrC,UAAMC,IAAOD,EAAG;AAEhB,YAAQC,EAAK,MAAM;AAAA,MACnB,KAAK;AACD,aAAK,YAAY;AAAA,UACb,MAAM;AAAA,UACN,QAAQ;AAAA,QAAA,CACkB;AAC9B;AAAA,MACJ,KAAK;AACO,gBAAA;AACR;AAAA,IACJ;AAEA,QAAI,SAAS;AAEb,cAAQA,EAAK,MAAM;AAAA,QACnB,KAAK;AACD,4BAAkBA,CAAI;AACtB;AAAA,QACJ,KAAK;AACD,UAAIA,EAAK,cACL,uBAAuBA,CAAI,IAG3B,kBAAkBA,CAAI;AAE1B;AAAA,QACJ,KAAK;AACO,kBAAA;AACR;AAAA,QACJ,KAAK;AACO,kBAAA,YAER,KAAK,YAAY;AAAA,YACb,MAAM;AAAA,YACN,QAAQ;AAAA,UAAA,CACkB,GAE9B,KAAK,MAAM;AACX;AAAA,MACJ;AAAA,EAAA,CACH;AACL;AHlIO,IAAAC,GAAAC,GAAAC,GAAAC;AGyIA,MAAMC,IAAN,cAAuB,YAAY;AAAA,EAetC,YAAa,EAAE,KAAAC,EAAI,IAA8B,IAAI;AAC3C;AANV,IAAAC,EAAA,MAAAN,GAAwB,CAAA;AACxB,IAAAM,EAAA,MAAAL,GAA0C;AAC1C,IAAAK,EAAA,MAAAJ,GAAA;AACA,IAAAI,EAAA,MAAAH,GAAmF;AAK/E,IAAAI,EAAA,MAAKL,GAAU,IAAI,OAAOG,KAAOD,EAAS,SAAS,IAEnD,KAAK,KAAK;AAAA,EACd;AAAA,EAlBA,OAAO,UAAsCI,GAAqCC,GAA0C;AACjH,WAAA;AAAA,MACH,UAAAD;AAAAA,MACA,MAAOC,KAAQ,CAAC;AAAA,IAAA;AAAA,EAExB;AAAA,EAeA,IAAI,SAAS;AACT,WAAOC,EAAA,MAAKR;AAAA,EAChB;AAAA,EAEA,IAAI,OAAOZ,GAAgB;AACvB,SAAK,OAAOA,CAAM;AAAA,EACtB;AAAA,EAEA,IAAI,QAAQ;AACR,WAAOoB,EAAA,MAAKP;AAAA,EAChB;AAAA,EAEA,OAAO;AACH,QAAIO,EAAA,MAAKP,MAAU,YAAYO,EAAA,MAAKV,GAAU,SAAS,GAAG;AACtD,MAAAO,EAAA,MAAKJ,GAAS;AACd,YAAMT,IAAMa,EAAA,MAAKN,GAAyBS,EAAA,MAAKV,GAAU;AAEzD,WAAK,QAAQN,CAAG,EAAE,KAAK,CAAUC,MAAA;AAC7B,QAAAY,EAAA,MAAKJ,GAAS,WACdI,EAAA,MAAKN,GAAyB;AAC9B,cAAMU,IAAQ,IAAI,aAAa,EAAE,KAAAjB,GAAK,QAAAC,EAAQ,CAAA;AAC9C,aAAK,cAAcgB,CAAK,GACxB,KAAK,KAAK;AAAA,MAAA,CACb;AAAA;AAAA,EAET;AAAA,EAEA,aAAa;AACT,IAAAD,EAAA,MAAKV,GAAU,SAAS;AAAA,EAC5B;AAAA,EAEA,OAAOV,GAAiB;AACT,IAAAA,UAAA,IAAI,OAAOc,EAAS,SAAS,IACxC,KAAK,UAAU,GACfG,EAAA,MAAKJ,GAAS,WACdI,EAAA,MAAKL,GAAUZ,IACf,KAAK,KAAK;AAAA,EACd;AAAA,EAEA,YAAY;AACR,IAAAoB,EAAA,MAAKR,GAAQ;EACjB;AAAA,EAEA,MAAM,QAAQZ,GAAiB;AAChB,IAAAA,UAAA,IAAI,OAAOc,EAAS,SAAS,IACxC,MAAM,KAAK,YACXG,EAAA,MAAKJ,GAAS,WACdI,EAAA,MAAKL,GAAUZ,IACf,KAAK,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,WAAW;AACb,WAAAoB,EAAA,MAAKR,GAAQ,YAAY;AAAA,MACrB,MAAM;AAAA,IAAA,CACoB,GAEvB,KAAK,aAAa,EAAE,MAAM,UAAU,MAAM,CAACU,MAAYA,EAAQ,UAAU,WAAA,CAAY,EAAE,KAAK,CAAUjB,OACzGY,EAAA,MAAKJ,GAAS,aACPR,EACV;AAAA,EACL;AAAA,EAEA,MAAM,UAAU;AACZ,IAAAe,EAAA,MAAKR,GAAQ,YAAY;AAAA,MACrB,MAAM;AAAA,IAAA,CACsB,GAEhCK,EAAA,MAAKJ,GAAS;AAAA,EAClB;AAAA,EAEA,MAAM,SAAS;AACX,IAAAO,EAAA,MAAKR,GAAQ,YAAY;AAAA,MACrB,MAAM;AAAA,IAAA,CACqB,GAE/BK,EAAA,MAAKJ,GAAS,WACd,KAAK,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,QAAgBT,GAAmC;AACrD,UAAMK,IAA+B;AAAA,MACjC,MAAM;AAAA,MACN,cAAcL,EAAI,SAAS,SAAS;AAAA,MACpC,MAAMA,EAAI;AAAA,IAAA;AAGT,IAAAgB,EAAA,MAAAR,GAAQ,YAAYH,CAAI;AAE7B,UAAMc,IAAyB,MAAM,KAAK,aAAiC,EAAE,MAAM,oBAAoB;AAEvG,QAAIA,EAAuB;AACvB,aAAOA,EAAuB;AAG9B,UAAM,IAAI,kBAAkB,MAAMA,EAAuB,KAAK;AAAA,EAEtE;AAAA,EAEA,MAAM,IAAgCL,GAAqCC,GAA8B;AACrG,UAAMf,IAAM,KAAK,MAAMc,GAAUC,CAAI;AAC9B,WAAA,KAAK,aAAaf,CAAG;AAAA,EAChC;AAAA,EAIA,MAAMoB,GAAWC,GACjB;AACI,QAAI,EAAEL,EAAA,MAAKP,MAAU,YAAYO,EAAA,MAAKP,MAAU;AAAY,YAAM,IAAI,gBAAgB,MAAMO,EAAA,MAAKP,EAAM;AAEnG,QAAAT;AAEA,WAAA,OAAOoB,KAAQ,aACTpB,IAAAU,EAAS,UAAUU,GAAMC,CAAI,IAG7BrB,IAAAoB,GAGLJ,EAAA,MAAAV,GAAU,KAAKN,CAAG,GAEvB,KAAK,KAAK,GAEHA;AAAA,EACX;AAAA,EAEA,OAAOA,GAAe;AAClB,UAAMsB,IAAWN,EAAA,MAAKV,GAAU,QAAQN,CAAG;AAE3C,WAAIsB,KAAY,KACL,MAGFN,EAAA,MAAAV,GAAU,OAAOgB,GAAU,CAAC,GAC1B;AAAA,EAEf;AAAA,EAGA,aAA2C,EAAE,MAAAC,GAAM,MAAAC,GAAM,SAAAC,IAAU,IAAO,IAA+B,IAAsB;AACpH,WAAA,IAAI,QAAQ,CAAWC,MAAA;AACtB,UAAAC;AAEJ,MAAAX,EAAA,MAAKR,GAAQ,iBAAiB,WAAW,CAACJ,MAAO;AAC7C,cAAMwB,IAA6BxB,EAAG;AACtC,QAAImB,KACIK,EAAa,QAAQL,KAIzBC,KACI,CAACA,EAAKI,CAAY,MAItBD,KAAW,aAAaA,CAAS,GACrCD,EAAQE,CAAuB;AAAA,MAAA,CAClC,GAEG,OAAOH,KAAW,aAClBE,IAAY,WAAW,MAAM;AACnB,cAAA,IAAI,uBAAuB,IAAI;AAAA,SACtCF,CAAO;AAAA,IACd,CACH;AAAA,EACL;AAAA,EAEA,aAAqBzB,GAAmC;AACpD,QAAI,CAACgB,EAAA,MAAKV,GAAU,SAASN,CAAG,KAAKgB,EAAA,MAAKT,MAA0BP;AAAW,YAAA,IAAI,YAAY,MAAMA,CAAG;AAEjG,WAAA,IAAI,QAAQ,CAAW0B,MAAA;AACrB,WAAA,iBAAiB,YAAY,CAACtB,MAAO;AACtC,cAAMa,IAAQb;AACV,QAAAa,EAAM,OAAOjB,KACb0B,EAAQT,EAAM,MAAM;AAAA,MACxB,CACH;AAAA,IAAA,CACJ;AAAA,EACL;AACJ;AAzMO,IAAM,WAANP;AAUHJ,IAAA,eACAC,IAAA,eACAC,IAAA,eACAC,IAAA,eAZAZ,EADS,UACO,aAAY,uCAAuC,WAAW,SAAS;AC/G3E,SAAA,gBAAgB,EAAE,QAAAgC,GAAQ,aAAAC,GAAa,MAAAC,GAAM,GAAG7B,KAAmCY,GAAqD;AAC/I,QAAAkB,IAAW,IAAI,iBAAiB,CAAWC,MAAA;AACxC,IAAAF,KAAMC,EAAS,WAAW,GACrBlB,EAAA,EAAE,SAAAmB,GAAS,UAAAD,EAAA,CAAU;AAAA,EAAA,CAClC;AAEQ,SAAAA,EAAA,QAAQH,GAAQ3B,CAAO,GAEnB4B,KAAA,QAAAA,EAAA,iBAAiB,SAAS,MAAM;AACzC,IAAAE,EAAS,WAAW;AAAA,EAAA,IAGjBA;AACV;AAQgB,SAAA,oBAAoB9B,GAAiCY,GAAqD;AACtH,SAAO,gBAAgB,EAAE,MAAM,IAAM,GAAGZ,EAAA,GAAWY,CAAQ;AAC/D;AAQO,SAAS,qBAAqB,EAAE,QAAAe,GAAQ,aAAAC,GAAa,GAAG5B,EAAA,GAAmCY,GAAuG;AAC9L,SAAA,IAAI,QAAQ,CAAWY,MAAA;AACpB,UAAAM,IAAW,IAAI,iBAAiB,CAAWC,MAAA;AAC7C,MAAAD,EAAS,WAAW,GACZN,EAAA,EAAE,SAAAO,GAAS,UAAAD,EAAA,CAAU;AAAA,IAAA,CAChC;AAEQ,IAAAA,EAAA,QAAQH,GAAQ3B,CAAO,GAEnB4B,KAAA,QAAAA,EAAA,iBAAiB,SAAS,MAAM;AACzC,MAAAE,EAAS,WAAW;AAAA,IAAA;AAAA,EACvB,CACJ;AACL;AAEO,MAAM,uBAAuB;AC1E7B,MAAM,mCAAmC,MAAM;AAAA,EAGlD,YAAaE,GAAY;AACrB,UAAM,gCAAgCA,KAAM;AAHhD,IAAArC,EAAA,cAAO,KAAK,YAAY;AAAA,EAIxB;AACJ;AAEO,MAAM,oCAAoC,MAAM;AAAA,EAGnD,YAAasC,GAAkB;AAC3B,UAAM,6CAA6CA,IAAW;AAHlE,IAAAtC,EAAA,cAAO,KAAK,YAAY;AAAA,EAIxB;AACJ;AAEO,MAAM,yCAAyC,MAAM;AAAA,EAArD;AAAA;AACH,IAAAA,EAAA,cAAO,KAAK,YAAY;AAAA;AAC5B;AC0EA,eAAsB,wBAAuC;AAClD,SAAA,IAAI,QAAQ,CAAW6B,MAAA;AAC1B,QAAI,SAAS,cAAc;AAAW,aAAOA,EAAQ;AACrD,aAAS,iBAAiB,oBAAoB,MAAMA,EAAS,CAAA;AAAA,EAAA,CAChE;AACL;AAEA,SAAS,WAAcU,GAA6B;AAChD,SAAIA,aAAa,YAAYA,EAAE,SAAS,IAC7B,KAGAA,KAAK;AAEpB;AAEA,eAAsB,aAEjBlC,GACL;AN9GO,MAAAP;AM+GC,MAAA0C;AACE,QAAAC,IAASpC,EAAQ,UAAU,SAAS,MACpCqC,IAAyBrC,EAAQ,kBAAkB,CAACoC,GAAQD,MAAaC,EAAO,cAAcD,CAAQ,IACtGF,IAAWjC,EAAQ,YAAY,OAC/BuB,IAAUvB,EAAQ,WAAW;AAKnC,OAJ+BA,EAAQ,0BAA0B,OAErC,MAAM,sBAAsB,GAEpD,QAAQA;AACR,IAAAmC,IAAW,IAAInC,EAAQ;AAAA,WAElB,cAAcA;AACnB,IAAAmC,IAAWnC,EAAQ;AAAA;AAGb,UAAA,IAAI,iCAAiC,oCAAoC;AAG/E,MAAAD,IAA+BsC,EAAcD,GAAQD,CAAQ;AAEjE,MAAI,WAAWpC,CAAM;AAAU,WAAAA;AAE/B,MAAIuC,IAAQ;AAEZ,QAAMC,IAAkB,IAAI,mBACtBX,IAA2BW,EAAgB;AAEjD,UAAA9C,IAAAO,EAAQ,gBAAR,QAAAP,EAAqB,iBAAiB,SAAS,MAAM8C,EAAgB,UAE9D,IAAI,QAAQ,CAACf,GAASgB,MAAW;AACpC,UAAMC,IAAW,gBAAgB,EAAE,QAAQL,GAAQ,aAAAR,GAAa,WAAW,IAAM,SAAS,IAAM,GAAG5B,EAAQ,mBAAmB,MAAM;AACvH,MAAAD,IAAAsC,EAAcD,GAAQD,CAAQ,GACnC,WAAWpC,CAAM,KACjByB,EAAQzB,CAAM,GACd0C,EAAS,WAAW,KAEfH,IAAQL,MACbQ,EAAS,WAAW,GACbD,EAAA,IAAI,4BAA4BP,CAAQ,CAAC,IAEpDK;AAAA,IAAA,CACH;AAEG,IAAAf,KAAW,MAASA,KAAW,SAC/B,WAAW,MAAM;AACb,MAAAkB,EAAS,WAAW,GACbD,EAAA,IAAI,2BAA2BjB,CAAO,CAAC;AAAA,OAC/CA,CAAO;AAAA,EACd,CACH;AACL;AAIgB,SAAA,eAAeY,GAAkBhB,GAAYuB,GAC7D;AACQ,MAAA1C;AAEA,SAAAmB,aAAgB,QAAQ,cAAcA,IAE5BnB,IAAA;AAAA,IACN,UAAAmC;AAAA,IACA,QAAQhB;AAAA,IACR,GAAGuB;AAAA,EAAA,IAKG1C,IAAA;AAAA,IACN,UAAAmC;AAAA,IACA,GAAGhB;AAAA,EAAA,GAIJ,aAAa,EAAE,UAAAgB,GAAU,GAAGnC,EAAS,CAAA;AAChD;AAIgB,SAAA,kBAAkBmC,GAAkBnC,GACpD;AACI,SAAO,aAAkC,EAAE,UAAAmC,GAAU,GAAGnC,EAAQ,CAAC,EAAE,KAAK,CAAKb,MAAA,MAAM,KAAKA,CAAC,CAAC;AAC9F;AAEgB,SAAA,qBAA2CiD,GAAoBD,GAAkBnC,GAAsD;AACnJ,SAAO,aAAa,EAAE,UAAAmC,GAAU,QAAAC,GAAQ,GAAGpC,EAAS,CAAA;AACxD;AAEgB,SAAA,iBAAuC2C,GAAY3C,GAAsD;AACrH,SAAO,aAAmB,EAAE,IAAA2C,GAAI,GAAG3C,EAAS,CAAA;AAChD;AAEgB,SAAA,kBAAwCmC,GAAkBnC,GAAsD;AAC5H,SAAO,aAAa,EAAE,UAAAmC,GAAU,SAAS,OAAU,GAAGnC,GAAS;AACnE;"}