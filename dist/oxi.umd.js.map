{"version":3,"file":"oxi.umd.js","sources":["../src/html.ts","../src/format.ts","../src/worker-errors.ts","../src/worker.ts","../src/mutation-observer.ts","../src/wait-for-element-errors.ts","../src/wait-for-element.ts"],"sourcesContent":["\n\nexport const HTMLEntityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n} as const;\n\nexport function escapeHTML(text: string) {\n    return text.replace(/[&<>\"'`=\\/]/g, (s) => HTMLEntityMap[s as keyof typeof HTMLEntityMap]);\n}\n  \nexport function html<Elem extends Element>(template: readonly string[], ...subst: any[]): Elem {\n    const completeString = [];\n\n    for (let i = 0; i < template.length; i++) {\n        completeString.push(template[i]);\n        if (subst[i]) completeString.push(escapeHTML(String(subst[i])));\n    }\n\n    return fromHTML<Elem>(completeString.join(\"\"));\n}\n\nexport function fromHTML<Elem extends Element>(text: string): Elem {\n    const elem = document.createElement(\"div\");\n    elem.innerHTML = text;\n    setTimeout(() => elem.remove());\n    return elem.children[0] as Elem;\n}","\nexport interface FormatStringOptions {\n    subst: {\n        format: string;\n        var: string;\n    }\n}\n\nexport function escapeRegExp(text: string) {\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\nexport function formatString(\n        text: string,\n        dict: Record<string, any>,\n        { subst = { format: \"${{ | }}\", var: \"|\" } }: Partial<FormatStringOptions> = {}): string\n{\n    const substRegex = subst.format\n        .split(subst.var)\n        .map(escapeRegExp)\n        .join(String.raw`([$\\w\\d-_.: ]+)`);\n    return text.replace(new RegExp(substRegex, \"g\"), (_, varKey) => dict[varKey]?.toString());\n}","\nimport { Job, WorkerJQ } from \"worker\";\n\nexport class WorkerUnreponsiveError extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n\n    constructor (worker: WorkerJQ) {\n        super(`worker is unresponsive`);\n        this.worker = worker;\n    }\n}\n\nexport class WorkerScriptError extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n\n    constructor (worker: WorkerJQ, error: any) {\n        super(`script error caused by worker (${error.name})`);\n        this.worker = worker;\n        this.cause = error;\n    }\n}\n\nexport class WorkerDeadState extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n\n    constructor (worker: WorkerJQ, state: string) {\n        super(`worker is in dead state (${state})`)\n        this.worker = worker;\n    }\n}\n\nexport class JobNotFound extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n    job: Job<any>;\n\n    constructor (worker: WorkerJQ, job: Job<any>) {\n        super(\"job not found in worker\");\n        this.worker = worker;\n        this.job = job;\n    }\n}","\nimport type {\n    AwaitMessageInit,\n    ChildMessage,\n    ChildMessageExecutionResultError,\n    ChildMessageExecutionResultSuccess,\n    ChildMessageStatus,\n    Job,\n    WorkerJQOptions,\n    ParentMessage,\n    ParentMessageClose,\n    ParentMessageExecution,\n    ParentMessageExecutionAsync,\n    ParentMessageResume,\n    ParentMessageSuspend,\n} from \"./worker-types\";\n\nimport {\n    JobNotFound,\n    WorkerDeadState,\n    WorkerScriptError,\n    WorkerUnreponsiveError\n} from \"./worker-errors\";\n\nexport * from \"./worker-types\";\nexport * from \"./worker-errors\";\n\nexport class JobDoneEvent extends Event {\n    job: Job<any>;\n    result: any;\n\n    constructor ({ job, result }: { job: Job<any>, result: any }, options?: EventInit) {\n        super(\"job-done\", options);\n        this.job = job;\n        this.result = result;\n    }\n}\n\nfunction workerLoop() {\n    let state: WorkerJQ[\"state\"] = \"idling\";\n\n    function executeParentCode(data: ParentMessageExecution | ParentMessageExecutionAsync) {\n        state = \"working\";\n        const callback = eval(`(${data.functionCode})`);\n        const args = data.args;\n\n        try {\n            const returnValue = callback(...args);\n            self.postMessage({\n                type: \"execution_result\",\n                success: true,\n                returnValue,\n            } satisfies ChildMessageExecutionResultSuccess);\n        }\n        catch (error) {\n            self.postMessage({\n                type: \"execution_result\",\n                success: false,\n                error,\n            } satisfies ChildMessageExecutionResultError);\n        }\n        state = \"idling\";\n    }\n    \n    async function executeParentCodeAsync(data: ParentMessageExecutionAsync) {\n        state = \"working\";\n        const callback = eval(`(${data.functionCode})`) as (...args: any[]) => Promise<any>;\n        const args = data.args;\n\n        callback(...args)\n            .then(returnValue => {\n                self.postMessage({\n                    type: \"execution_result\",\n                    success: true,\n                    returnValue,\n                } satisfies ChildMessageExecutionResultSuccess);\n                state = \"idling\";\n            })\n            .catch(error => {\n                self.postMessage({\n                    type: \"execution_result\",\n                    success: false,\n                    error,\n                } satisfies ChildMessageExecutionResultError);\n                state = \"idling\";\n            });\n    }\n    \n    self.addEventListener(\"message\", (ev) => {\n        const data = ev.data as ParentMessage;\n\n        switch (data.type) {\n        case \"status\":\n            self.postMessage({\n                type: \"status\",\n                status: state\n            } satisfies ChildMessageStatus);\n            break;\n        case \"resume\":\n            state = \"idling\";\n            break;\n        }\n\n        if (state == \"suspended\") return;\n\n        switch (data.type) {\n        case \"execute\":\n            executeParentCode(data);\n            break;\n        case \"execute_async\":\n            if (data.shouldAwait) {\n                executeParentCodeAsync(data);\n            }\n            else {\n                executeParentCode(data);\n            }\n            break;\n        case \"suspend\":\n            state = \"suspended\";\n            break;\n        case \"shutdown\":\n            state = \"shutdown\";\n            \n            self.postMessage({\n                type: \"status\",\n                status: \"shutdown\"\n            } satisfies ChildMessageStatus);\n\n            self.close();\n            break;\n        }\n    });\n}\n\n/**\n * WorkerJQ is a queue-based wrapper around {@link Worker} from Web Worker API.\n * \n * Developer can queue multiple jobs to WorkerJQ, then the class will manage its job by executing the last job on the queue, then waiting into the next one.\n */\nexport class WorkerJQ extends EventTarget {\n    static readonly scriptUrl = `data:text/javascript;charset=utf-8,(${workerLoop.toString()}).call(this)`;\n\n    static createJob<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Readonly<Job<Result, Args>> {\n        return {\n            callback,\n            args: (args ?? []) as Args\n        };\n    }\n\n    #jobQueue: Job<any>[] = [];\n    #currentlyExecutingJob: Job<any> | null = null;\n    #worker: Worker;\n    #state: \"idling\" | \"working\" | \"suspended\" | \"shutdown\" | \"terminated\" | \"error\" = \"idling\";\n\n    constructor ({ url }: Partial<WorkerJQOptions> = {}) {\n        super();\n\n        this.#worker = new Worker(url ?? WorkerJQ.scriptUrl);\n\n        this.work();\n    }\n\n    get worker() {\n        return this.#worker;\n    }\n\n    set worker(worker: Worker) {\n        this.reinit(worker);\n    }\n\n    get state() {\n        return this.#state;\n    }\n\n    work() {\n        if (this.#state == \"idling\" && this.#jobQueue.length > 0) {\n            this.#state = \"working\";\n            const job = this.#currentlyExecutingJob = this.#jobQueue.pop()!;\n\n            this.execute(job).then(result => {\n                this.#state = \"idling\";\n                this.#currentlyExecutingJob = null;\n                const event = new JobDoneEvent({ job, result });\n                this.dispatchEvent(event);\n                this.work();\n            });\n        }\n    }\n\n    clearQueue() {\n        this.#jobQueue.length = 0;\n    }\n\n    reinit(worker?: Worker) {\n        worker ??= new Worker(WorkerJQ.scriptUrl);\n        this.terminate();\n        this.#state = \"idling\";\n        this.#worker = worker;\n        this.work();\n    }\n\n    terminate() {\n        this.#worker.terminate();\n    }\n\n    async restart(worker?: Worker) {\n        worker ??= new Worker(WorkerJQ.scriptUrl);\n        await this.shutdown();\n        this.#state = \"idling\";\n        this.#worker = worker;\n        this.work();\n    }\n\n    async shutdown() {\n        this.#worker.postMessage({\n            type: \"shutdown\"\n        } satisfies ParentMessageClose);\n\n        return this.awaitMessage({ type: \"status\", test: (message) => message.status == \"shutdown\" }).then(result => {\n            this.#state = \"shutdown\";\n            return result;\n        });\n    }\n\n    async suspend() {\n        this.#worker.postMessage({\n            type: \"suspend\"\n        } satisfies ParentMessageSuspend);\n\n        this.#state = \"suspended\";\n    }\n\n    async resume() {\n        this.#worker.postMessage({\n            type: \"resume\"\n        } satisfies ParentMessageResume);\n\n        this.#state = \"idling\";\n        this.work();\n    }\n\n    async execute<Result>(job: Job<Result>): Promise<Result> {\n        const data: ParentMessageExecution = {\n            type: \"execute\",\n            functionCode: job.callback.toString(),\n            args: job.args\n        };\n\n        this.#worker.postMessage(data);\n\n        const messageExecutionResult = await this.awaitMessage<\"execution_result\">({ type: \"execution_result\" });\n\n        if (messageExecutionResult.success) {\n            return messageExecutionResult.returnValue;\n        }\n        else {\n            throw new WorkerScriptError(this, messageExecutionResult.error);\n        }\n    }\n\n    async run<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Promise<Result> {\n        const job = this.queue(callback, args);\n        return this.awaitJobDone(job);\n    }\n\n    queue<TJob extends Job<any>>(job: TJob): Readonly<TJob>;\n    queue<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Readonly<Job<Result, Args>>;\n    queue(arg0: any, arg1?: any)\n    {\n        if (!(this.#state == \"idling\" || this.#state == \"working\")) throw new WorkerDeadState(this, this.#state);\n\n        let job: Job<any>;\n        \n        if (typeof arg0 == \"function\") {\n            job = WorkerJQ.createJob(arg0, arg1);\n        }\n        else {\n            job = arg0;\n        }\n\n        this.#jobQueue.push(job);\n\n        this.work();\n\n        return job;\n    }\n\n    remove(job: Job<any>) {\n        const jobIndex = this.#jobQueue.indexOf(job);\n\n        if (jobIndex == -1) {\n            return false;\n        }\n        else {\n            this.#jobQueue.splice(jobIndex, 1);\n            return true;\n        }\n    }\n\n    awaitMessage<Type extends ChildMessage[\"type\"]>(options: { type: Type } & Partial<AwaitMessageInit<Extract<ChildMessage, { type: Type }>>>): Promise<Extract<ChildMessage, { type: Type }>>;\n    awaitMessage<Message extends ChildMessage>({ type, test, timeout = 50_000 }: Partial<AwaitMessageInit> = {}): Promise<Message> {\n        return new Promise(resolve => {\n            let timeoutId: NodeJS.Timeout;\n\n            this.#worker.addEventListener(\"message\", (ev) => {\n                const childMessage: ChildMessage = ev.data;\n                if (type) {\n                    if (childMessage.type != type) {\n                        return;\n                    }\n                }\n                if (test) {\n                    if (!test(childMessage)) {\n                        return;\n                    }\n                }\n                if (timeoutId) clearTimeout(timeoutId);\n                resolve(childMessage as Message);\n            });\n\n            if (typeof timeout == \"number\") {\n                timeoutId = setTimeout(() => {\n                    throw new WorkerUnreponsiveError(this);\n                }, timeout);\n            }\n        });\n    }\n\n    awaitJobDone<Result>(job: Job<Result>): Promise<Result> {\n        if (!this.#jobQueue.includes(job) && this.#currentlyExecutingJob != job) throw new JobNotFound(this, job);\n\n        return new Promise(resolve => {\n            this.addEventListener(\"job-done\", (ev) => {\n                const event = ev as JobDoneEvent;\n                if (event.job == job) {\n                    resolve(event.result);\n                }\n            });\n        })\n    }\n}","\n/**\n * Configuration used for {@link observeMutation} and {@link MutationObserver}.\n */\nexport interface ObserveMutationOptions extends MutationObserverInit {\n    /**\n     * Target node for mutation observer. This will be used for `MutationObserver.observe`.\n     */\n    target: Node;\n    /**\n     * Abort signal used for disconnecting mutation observer.\n     * \n     * If abort signal is aborted, then mutation observer is disconnected.\n     */\n    abortSignal?: AbortSignal;\n    /**\n     * This will make mutation observer disconnect after detecting mutation once.\n     */\n    once?: boolean;\n}\n\nexport type ObserveMutationCallback = (info: { records: MutationRecord[], observer: MutationObserver }) => void;\n\n/**\n* Create a new `MutationObserver` with options and callback.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutation({ target, abortSignal, once, ...options }: ObserveMutationOptions, callback: ObserveMutationCallback): MutationObserver {\n   const observer = new MutationObserver(records => {\n        if (once) observer.disconnect();\n        callback({ records, observer });\n   });\n\n   observer.observe(target, options);\n\n   abortSignal?.addEventListener(\"abort\", () => {\n       observer.disconnect();\n   });\n\n   return observer;\n}\n\n/**\n* Create a new `MutationObserver` that only executes once.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutationOnce(options: ObserveMutationOptions, callback: ObserveMutationCallback): MutationObserver {\n    return observeMutation({ once: true, ...options }, callback);\n}\n\n/**\n* Create a new `MutationObserver` asyncronously that only executes once.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutationAsync({ target, abortSignal, ...options }: ObserveMutationOptions, callback: ObserveMutationCallback): Promise<{ records: MutationRecord[], observer: MutationObserver }> {\n    return new Promise(resolve => {\n        const observer = new MutationObserver(records => {\n            observer.disconnect();\n            resolve({ records, observer });\n        });\n\n        observer.observe(target, options);\n\n        abortSignal?.addEventListener(\"abort\", () => {\n            observer.disconnect();\n        });\n    });\n}\n\nexport const makeMutationObserver = observeMutation;","\nexport class WaitForElementTimeoutError extends Error {\n    name = this.constructor.name;\n\n    constructor (ms: number) {\n        super(`wait for element timeout for ${ms}ms`);\n    }\n}\n\nexport class WaitForElementMaxTriesError extends Error {\n    name = this.constructor.name;\n\n    constructor (maxTries: number) {\n        super(`wait for element out of tries (max tries: ${maxTries})`);\n    }\n}\n\nexport class WaitForElementMissingOptionError extends Error {\n    name = this.constructor.name;\n}","\nimport { WaitForElementMissingOptionError, WaitForElementMaxTriesError, WaitForElementTimeoutError } from \"./wait-for-element-errors\";\nimport { observeMutation } from \"./mutation-observer\";\n\nexport type QueryOptions<QueryFnResult, QueryFn extends (selector: string) => QueryFnResult | null = (selector: string) => QueryFnResult | null> =\n    ({ id: string } | { selector: string })\n    & {\n        parent?: ParentNode;\n        querySelector?: QueryFn;\n        abortSignal?: AbortSignal;\n        timeout?: number | false;\n        maxTries?: number;\n        ensureDomContentLoaded?: boolean;\n        observerOptions?: MutationObserverInit;\n    };\n\nexport async function executeQuery\n    <QueryFnResult, QueryFn extends (selector: string) => QueryFnResult | null = (selector: string) => QueryFnResult | null>\n    (options: QueryOptions<QueryFnResult, QueryFn>): Promise<QueryFnResult>\n{\n    let selector: string;\n    const parent = options.parent ?? document.body;\n    const querySelector: QueryFn = options.querySelector ?? document.querySelector as QueryFn;\n    const maxTries = options.maxTries ?? Infinity;\n    const timeout = options.timeout ?? 10_000;\n\n    if (\"id\" in options) {\n        selector = `#${options.id}`;\n    }\n    else if (\"selector\" in options) {\n        selector = options.selector;\n    }\n    else {\n        throw new WaitForElementMissingOptionError(`missing options \"id\" or \"selector\"`);\n    }\n\n    let result: QueryFnResult | null = querySelector(selector);\n\n    if (result) return result;\n\n    let tries = 0;\n\n    const abortController = new AbortController;\n    const abortSignal: AbortSignal = abortController.signal;\n\n    options.abortSignal?.addEventListener(\"abort\", () => abortController.abort());\n\n    return new Promise((resolve, reject) => {\n        const mutation = observeMutation({ target: parent, abortSignal, childList: true, subtree: true, ...options.observerOptions }, () => {\n            result = querySelector(selector);\n            if (result != null) {\n                resolve(result);\n                mutation.disconnect();\n            }\n            else if (tries > maxTries) {\n                mutation.disconnect();\n                reject(new WaitForElementMaxTriesError(maxTries));\n            }\n            tries++;\n        });\n\n        if (timeout != false && timeout != Infinity) {\n            setTimeout(() => {\n                mutation.disconnect();\n                reject(new WaitForElementTimeoutError(timeout));\n            }, timeout);\n        }\n    });\n}\n\nexport function waitForElement<Elem extends Element>(selector: string, options: QueryOptions<Elem>): Promise<Elem> {\n    return executeQuery({ selector, ...options });\n}\n\nexport function waitForElementAll(selector: string, options: QueryOptions<NodeListOf<Element>>): Promise<Element[]> {\n    return executeQuery<NodeListOf<Element>>({ selector, ...options }).then(i => Array.from(i));\n}\n\nexport function waitForElementParent<Elem extends Element>(parent: ParentNode, selector: string, options: QueryOptions<Elem>): Promise<Elem> {\n    return executeQuery({ selector, parent, ...options });\n}\n\nexport function waitForElementId<Elem extends Element>(id: string, options: QueryOptions<Elem>): Promise<Elem> {\n    return executeQuery<Elem>({ id, ...options });\n}\n\nexport function waitForElementInf<Elem extends Element>(selector: string, options: QueryOptions<Elem>): Promise<Elem> {\n    return executeQuery({ selector, timeout: Infinity, ...options });\n}"],"names":["text","s","template","subst","completeString","i","elem","dict","substRegex","_","varKey","_a","worker","__publicField","error","state","job","result","options","returnValue","ev","data","_WorkerJQ","url","__privateAdd","_jobQueue","_currentlyExecutingJob","_worker","_state","__privateSet","callback","args","__privateGet","event","message","messageExecutionResult","arg0","arg1","jobIndex","type","test","timeout","resolve","timeoutId","childMessage","target","abortSignal","once","observer","records","ms","maxTries","selector","parent","querySelector","tries","abortController","reject","mutation","id"],"mappings":"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"}