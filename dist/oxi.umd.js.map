{"version":3,"file":"oxi.umd.js","sources":["../src/html.ts","../src/format.ts","../src/worker-errors.ts","../src/worker.ts","../src/mutation-observer.ts","../src/wait-for-element-errors.ts","../src/wait-for-element.ts","../node_modules/.pnpm/normalize-url@8.0.0/node_modules/normalize-url/index.js","../src/network.ts","../src/network-interceptor.ts"],"sourcesContent":["\n\nexport const HTMLEntityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n} as const;\n\nexport function escapeHTML(text: string) {\n    return text.replace(/[&<>\"'`=\\/]/g, (s) => HTMLEntityMap[s as keyof typeof HTMLEntityMap]);\n}\n  \nexport function html<Elem extends Element>(template: readonly string[], ...subst: any[]): Elem {\n    const completeString = [];\n\n    for (let i = 0; i < template.length; i++) {\n        completeString.push(template[i]);\n        if (subst[i]) completeString.push(escapeHTML(String(subst[i])));\n    }\n\n    return fromHTML<Elem>(completeString.join(\"\"));\n}\n\nexport function fromHTML<Elem extends Element>(text: string): Elem {\n    const elem = document.createElement(\"div\");\n    elem.innerHTML = text;\n    setTimeout(() => elem.remove());\n    return elem.children[0] as Elem;\n}","\nexport interface FormatStringOptions {\n    subst: {\n        format: string;\n        var: string;\n    }\n}\n\nexport function escapeRegExp(text: string) {\n    return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\nexport function formatString(\n        text: string,\n        dict: Record<string, any>,\n        { subst = { format: \"${{ | }}\", var: \"|\" } }: Partial<FormatStringOptions> = {}): string\n{\n    const substRegex = subst.format\n        .split(subst.var)\n        .map(escapeRegExp)\n        .join(String.raw`([$\\w\\d-_.: ]+)`);\n    return text.replace(new RegExp(substRegex, \"g\"), (_, varKey) => dict[varKey]?.toString());\n}","\nimport { Job, WorkerJQ } from \"worker\";\n\nexport class WorkerUnreponsiveError extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n\n    constructor (worker: WorkerJQ) {\n        super(`worker is unresponsive`);\n        this.worker = worker;\n    }\n}\n\nexport class WorkerScriptError extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n\n    constructor (worker: WorkerJQ, error: any) {\n        super(`script error caused by worker (${error.name})`);\n        this.worker = worker;\n        this.cause = error;\n    }\n}\n\nexport class WorkerDeadState extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n\n    constructor (worker: WorkerJQ, state: string) {\n        super(`worker is in dead state (${state})`)\n        this.worker = worker;\n    }\n}\n\nexport class JobNotFound extends Error {\n    name = this.constructor.name;\n    worker: WorkerJQ;\n    job: Job<any>;\n\n    constructor (worker: WorkerJQ, job: Job<any>) {\n        super(\"job not found in worker\");\n        this.worker = worker;\n        this.job = job;\n    }\n}","\nimport type {\n    AwaitMessageInit,\n    ChildMessage,\n    ChildMessageExecutionResultError,\n    ChildMessageExecutionResultSuccess,\n    ChildMessageStatus,\n    Job,\n    WorkerJQOptions,\n    ParentMessage,\n    ParentMessageClose,\n    ParentMessageExecution,\n    ParentMessageExecutionAsync,\n    ParentMessageResume,\n    ParentMessageSuspend,\n} from \"./worker-types\";\n\nimport {\n    JobNotFound,\n    WorkerDeadState,\n    WorkerScriptError,\n    WorkerUnreponsiveError\n} from \"./worker-errors\";\n\nexport * from \"./worker-types\";\nexport * from \"./worker-errors\";\n\nexport class JobFinishedEvent extends Event {\n    job: Job<any>;\n    result: any;\n\n    constructor ({ job, result }: { job: Job<any>, result: any }, options?: EventInit) {\n        super(\"job-finished\", options);\n        this.job = job;\n        this.result = result;\n    }\n}\n\nexport class JobErrorEvent extends Event {\n    job: Job<any>;\n    error: any;\n\n    constructor ({ job, error }: { job: Job<any>, error: any }, options?: EventInit) {\n        super(\"job-error\", options);\n        this.job = job;\n        this.error = error;\n    }\n}\n\nfunction workerLoop() {\n    let state: WorkerJQ[\"state\"] = \"idling\";\n\n    function executeParentCode(data: ParentMessageExecution | ParentMessageExecutionAsync) {\n        state = \"working\";\n        const callback = eval(`(${data.functionCode})`);\n        const args = data.args;\n\n        try {\n            const returnValue = callback(...args);\n            self.postMessage({\n                type: \"execution_result\",\n                success: true,\n                returnValue,\n            } satisfies ChildMessageExecutionResultSuccess);\n        }\n        catch (error) {\n            self.postMessage({\n                type: \"execution_result\",\n                success: false,\n                error,\n            } satisfies ChildMessageExecutionResultError);\n        }\n        state = \"idling\";\n    }\n    \n    async function executeParentCodeAsync(data: ParentMessageExecutionAsync) {\n        state = \"working\";\n        const callback = eval(`(${data.functionCode})`) as (...args: any[]) => Promise<any>;\n        const args = data.args;\n\n        callback(...args)\n            .then(returnValue => {\n                self.postMessage({\n                    type: \"execution_result\",\n                    success: true,\n                    returnValue,\n                } satisfies ChildMessageExecutionResultSuccess);\n                state = \"idling\";\n            })\n            .catch(error => {\n                self.postMessage({\n                    type: \"execution_result\",\n                    success: false,\n                    error,\n                } satisfies ChildMessageExecutionResultError);\n                state = \"idling\";\n            });\n    }\n    \n    self.addEventListener(\"message\", (ev) => {\n        const data = ev.data as ParentMessage;\n\n        switch (data.type) {\n        case \"status\":\n            self.postMessage({\n                type: \"status\",\n                status: state\n            } satisfies ChildMessageStatus);\n            break;\n        case \"resume\":\n            state = \"idling\";\n            break;\n        }\n\n        if (state == \"suspended\") return;\n\n        switch (data.type) {\n        case \"execute\":\n            executeParentCode(data);\n            break;\n        case \"execute_async\":\n            if (data.shouldAwait) {\n                executeParentCodeAsync(data);\n            }\n            else {\n                executeParentCode(data);\n            }\n            break;\n        case \"suspend\":\n            state = \"suspended\";\n            break;\n        case \"shutdown\":\n            state = \"shutdown\";\n            \n            self.postMessage({\n                type: \"status\",\n                status: \"shutdown\"\n            } satisfies ChildMessageStatus);\n\n            self.close();\n            break;\n        }\n    });\n}\n\n/**\n * WorkerJQ is a queue-based wrapper around {@link Worker} from Web Worker API.\n * \n * Developer can queue multiple jobs to WorkerJQ, then the class will manage its job by executing the last job on the queue, then waiting into the next one.\n */\nexport class WorkerJQ extends EventTarget {\n    static readonly scriptUrl = `data:text/javascript;charset=utf-8,(${workerLoop.toString()}).call(this)`;\n\n    static createJob<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Readonly<Job<Result, Args>> {\n        return {\n            callback,\n            args: (args ?? []) as Args\n        };\n    }\n\n    #jobQueue: Job<any>[] = [];\n    #currentlyExecutingJob: Job<any> | null = null;\n    #worker: Worker;\n    #state: \"idling\" | \"working\" | \"suspended\" | \"shutdown\" | \"terminated\" | \"error\" = \"idling\";\n\n    constructor ({ url }: Partial<WorkerJQOptions> = {}) {\n        super();\n\n        this.#worker = new Worker(url ?? WorkerJQ.scriptUrl);\n\n        this.work();\n    }\n\n    get worker() {\n        return this.#worker;\n    }\n\n    set worker(worker: Worker) {\n        this.reinit(worker);\n    }\n\n    get state() {\n        return this.#state;\n    }\n\n    work() {\n        if (this.#state == \"idling\" && this.#jobQueue.length > 0) {\n            this.#state = \"working\";\n            const job = this.#currentlyExecutingJob = this.#jobQueue.pop()!;\n\n            this.execute(job).then(result => {\n                this.#state = \"idling\";\n                this.#currentlyExecutingJob = null;\n                const event = new JobFinishedEvent({ job, result });\n                this.dispatchEvent(event);\n                this.work();\n            }).catch(error => {\n                const workerScriptError = error as WorkerScriptError;\n                console.error(workerScriptError);\n                this.#state = \"idling\";\n                this.#currentlyExecutingJob = null;\n                const event = new JobErrorEvent({ job, error: workerScriptError.cause });\n                this.dispatchEvent(event);\n                this.work();\n            });\n        }\n    }\n\n    clearQueue() {\n        this.#jobQueue.length = 0;\n    }\n\n    reinit(worker?: Worker) {\n        worker ??= new Worker(WorkerJQ.scriptUrl);\n        this.terminate();\n        this.#state = \"idling\";\n        this.#worker = worker;\n        this.work();\n    }\n\n    terminate() {\n        this.#worker.terminate();\n        this.#state = \"terminated\";\n    }\n\n    async restart(worker?: Worker) {\n        worker ??= new Worker(WorkerJQ.scriptUrl);\n        await this.shutdown();\n        this.#state = \"idling\";\n        this.#worker = worker;\n        this.work();\n    }\n\n    async shutdown() {\n        this.#worker.postMessage({\n            type: \"shutdown\"\n        } satisfies ParentMessageClose);\n\n        return this.awaitMessage({ type: \"status\", test: (message) => message.status == \"shutdown\" }).then(result => {\n            this.#state = \"shutdown\";\n            return result;\n        });\n    }\n\n    async suspend() {\n        this.#worker.postMessage({\n            type: \"suspend\"\n        } satisfies ParentMessageSuspend);\n\n        this.#state = \"suspended\";\n\n        return this.awaitMessage({ type: \"status\", test: message => message.status == \"suspended\" });\n    }\n\n    async resume() {\n        this.#worker.postMessage({\n            type: \"resume\"\n        } satisfies ParentMessageResume);\n\n        return this.awaitMessage({ type: \"status\", test: message => message.status == \"idling\" }).then(result => {\n            this.#state = \"idling\";\n            this.work();\n            return result;\n        });\n    }\n\n    async execute<Result>(job: Job<Result>): Promise<Result> {\n        const data: ParentMessageExecution = {\n            type: \"execute\",\n            functionCode: job.callback.toString(),\n            args: job.args\n        };\n\n        this.#worker.postMessage(data);\n\n        const messageExecutionResult = await this.awaitMessage<\"execution_result\">({ type: \"execution_result\" });\n\n        if (messageExecutionResult.success) {\n            return messageExecutionResult.returnValue;\n        }\n        else {\n            throw new WorkerScriptError(this, messageExecutionResult.error);\n        }\n    }\n\n    async run<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Promise<Result> {\n        const job = this.queue(callback, args);\n        return this.awaitJob(job);\n    }\n\n    queue<TJob extends Job<any>>(job: TJob): Readonly<TJob>;\n    queue<Result, Args extends any[]>(callback: (...args: Args) => Result, args?: Args): Readonly<Job<Result, Args>>;\n    queue(arg0: any, arg1?: any)\n    {\n        if (!(this.#state == \"idling\" || this.#state == \"working\")) throw new WorkerDeadState(this, this.#state);\n\n        let job: Job<any>;\n        \n        if (typeof arg0 == \"function\") {\n            job = WorkerJQ.createJob(arg0, arg1);\n        }\n        else {\n            job = arg0;\n        }\n\n        this.#jobQueue.push(job);\n\n        this.work();\n\n        return job;\n    }\n\n    remove(job: Job<any>) {\n        const jobIndex = this.#jobQueue.indexOf(job);\n\n        if (jobIndex == -1) {\n            return false;\n        }\n        else {\n            this.#jobQueue.splice(jobIndex, 1);\n            return true;\n        }\n    }\n\n    awaitMessage<Type extends ChildMessage[\"type\"]>(options: { type: Type } & Partial<AwaitMessageInit<Extract<ChildMessage, { type: Type }>>>): Promise<Extract<ChildMessage, { type: Type }>>;\n    awaitMessage<Message extends ChildMessage>({ type, test, timeout = 50_000 }: Partial<AwaitMessageInit> = {}): Promise<Message> {\n        return new Promise(resolve => {\n            let timeoutId: NodeJS.Timeout;\n\n            this.#worker.addEventListener(\"message\", (ev) => {\n                const childMessage: ChildMessage = ev.data;\n                if (type) {\n                    if (childMessage.type != type) {\n                        return;\n                    }\n                }\n                if (test) {\n                    if (!test(childMessage)) {\n                        return;\n                    }\n                }\n                if (timeoutId) clearTimeout(timeoutId);\n                resolve(childMessage as Message);\n            });\n\n            if (typeof timeout == \"number\") {\n                timeoutId = setTimeout(() => {\n                    throw new WorkerUnreponsiveError(this);\n                }, timeout);\n            }\n        });\n    }\n\n    awaitJob<Result>(job: Job<Result>): Promise<Result> {\n        if (!this.#jobQueue.includes(job) && this.#currentlyExecutingJob != job) throw new JobNotFound(this, job);\n\n        return new Promise((resolve, reject) => {\n            const jobFinishedCallback = (ev: any) => {\n                const event = ev as JobFinishedEvent;\n                if (event.job == job) {\n                    resolve(event.result);\n                    this.removeEventListener(\"job-finished\", jobFinishedCallback);\n                }\n            };\n            const jobErrorCallback = (ev: any) => {\n                const event = ev as JobErrorEvent;\n                if (event.job == job) {\n                    reject(event.error);\n                    this.removeEventListener(\"job-error\", jobFinishedCallback);\n                }\n            };\n            this.addEventListener(\"job-finished\", jobFinishedCallback);\n            this.addEventListener(\"job-error\", jobErrorCallback)\n        });\n    }\n\n    awaitJobDone = this.awaitJob;\n}","\n/**\n * Configuration used for {@link observeMutation} and {@link MutationObserver}.\n */\nexport interface ObserveMutationOptions extends MutationObserverInit {\n    /**\n     * Target node for mutation observer. This will be used for `MutationObserver.observe`.\n     */\n    target: Node;\n    /**\n     * Abort signal used for disconnecting mutation observer.\n     * \n     * If abort signal is aborted, then mutation observer is disconnected.\n     */\n    abortSignal?: AbortSignal;\n    /**\n     * This will make mutation observer disconnect after detecting mutation once.\n     */\n    once?: boolean;\n}\n\nexport type ObserveMutationCallback = (info: { records: MutationRecord[], observer: MutationObserver }) => void;\n\n/**\n* Create a new `MutationObserver` with options and callback.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutation({ target, abortSignal, once, ...options }: ObserveMutationOptions, callback: ObserveMutationCallback): MutationObserver {\n   const observer = new MutationObserver(records => {\n        if (once) observer.disconnect();\n        callback({ records, observer });\n   });\n\n   observer.observe(target, options);\n\n   abortSignal?.addEventListener(\"abort\", () => {\n       observer.disconnect();\n   });\n\n   return observer;\n}\n\n/**\n* Create a new `MutationObserver` that only executes once.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutationOnce(options: ObserveMutationOptions, callback: ObserveMutationCallback): MutationObserver {\n    return observeMutation({ once: true, ...options }, callback);\n}\n\n/**\n* Create a new `MutationObserver` asyncronously that only executes once.\n* @param {ObserveMutationOptions} options \n* @param {ObserveMutationCallback} callback \n* @returns {MutationObserver}\n*/\nexport function observeMutationAsync({ target, abortSignal, ...options }: ObserveMutationOptions, callback: ObserveMutationCallback): Promise<{ records: MutationRecord[], observer: MutationObserver }> {\n    return new Promise(resolve => {\n        const observer = new MutationObserver(records => {\n            observer.disconnect();\n            resolve({ records, observer });\n        });\n\n        observer.observe(target, options);\n\n        abortSignal?.addEventListener(\"abort\", () => {\n            observer.disconnect();\n        });\n    });\n}\n\nexport const makeMutationObserver = observeMutation;","\nexport class WaitForElementTimeoutError extends Error {\n    name = this.constructor.name;\n\n    constructor (ms: number) {\n        super(`wait for element timeout for ${ms}ms`);\n    }\n}\n\nexport class WaitForElementMaxTriesError extends Error {\n    name = this.constructor.name;\n\n    constructor (maxTries: number) {\n        super(`wait for element out of tries (max tries: ${maxTries})`);\n    }\n}\n\nexport class WaitForElementMissingOptionError extends Error {\n    name = this.constructor.name;\n}","\nimport {\n    WaitForElementMissingOptionError,\n    WaitForElementMaxTriesError,\n    WaitForElementTimeoutError\n} from \"./wait-for-element-errors\";\n\nimport { observeMutation } from \"./mutation-observer\";\n\nexport type QueryFnDefault<QueryFnResult> = (parent: ParentNode, selector: string) => QueryFnResult | null;\n\nexport type QueryOptions<QueryFnResult, QueryFn extends QueryFnDefault<QueryFnResult> = QueryFnDefault<QueryFnResult>> =\n    ({\n        /** Set to ID selector that the operation will query select.\n         * \n         * If `id` and/or `selector` is not set, then it will throw {@link WaitForElementMissingOptionError}.\n         * \n         * @see {@link document.getElementById}\n         */\n        id: string;\n    } | {\n        /**\n         * Set to valid selector that the operation will query select.\n         * \n         * If `id` and/or `selector` is not set, then it will throw {@link WaitForElementMissingOptionError}.\n         * \n         * @see {@link document.querySelector} \n         */\n        selector: string;\n    })\n    & {\n        /**\n         * Set to parent node that the operation will be query select from.\n         * \n         * This will also set mutation observer's target.\n         * \n         * By default, it will set to {@link document.documentElement}.\n         */\n        parent?: ParentNode;\n        /**\n         * Set to element or an operation that will be used for query selecting.\n         * \n         * Can be set to {@link document.querySelector} or {@link document.querySelectorAll}.\n         * \n         * By default, it will set to {@link document.querySelector}.\n         * \n         * @see {@link document.querySelector}\n         * @see {@link QueryOptions.parent}\n         */\n        querySelector?: QueryFn;\n        /**\n         * Set to abort signal from {@link AbortController} that will be used to abort the operation.\n         * \n         * @see {@link AbortController}\n         */\n        abortSignal?: AbortSignal;\n        /**\n         * Set to milliseconds that will be used to timeout the operation.\n         * \n         * If operation has timeout, then it will throw {@link WaitForElementTimeoutError}.\n         * \n         * Set to `false` to disable timeout feature.\n         * \n         * By default, it will set to `10_000` milliseconds.\n         * \n         * @see {@link setTimeout}\n         */\n        timeout?: number | false;\n        /**\n         * Set to number which will determine how much the operation can be restarted.\n         * \n         * If operation has reached max tries, then it will throw {@link WaitForElementMaxTriesError}.\n         * \n         * By default, it will set to `Infinity`.\n         */\n        maxTries?: number;\n        /**\n         * Set to true if the operation will wait for `DOMContentLoaded` event.\n         * \n         * By default, it will set to `true`.\n         */\n        ensureDomContentLoaded?: boolean;\n        /**\n         * Set to mutation observer's options for the operation's mutation observer options.\n         * \n         * By default, the operation's will enable `childList` and `subtree` mutation observer option.\n         * \n         * @see {@link MutationObserverInit}\n         * @see {@link QueryOptions.parent}\n         */\n        observerOptions?: MutationObserverInit;\n    };\n\nexport async function awaitDomContentLoaded(): Promise<void> {\n    return new Promise(resolve => {\n        if (document.readyState != \"loading\") return resolve();\n        document.addEventListener(\"DOMContentLoaded\", () => resolve());\n    });\n}\n\nfunction isNotEmpty<T>(x: T): x is Exclude<T, null> {\n    if (x instanceof NodeList && x.length > 0) {\n        return true;\n    }\n    else {\n        return x != null;\n    }\n}\n\nexport async function executeQuery\n    <QueryFnResult, QueryFn extends QueryFnDefault<QueryFnResult> = QueryFnDefault<QueryFnResult>>\n    (options: QueryOptions<QueryFnResult, QueryFn>): Promise<QueryFnResult>\n{\n    let selector: string;\n    const parent = options.parent ?? document.body;\n    const querySelector: QueryFn = options.querySelector ?? ((parent, selector) => parent.querySelector(selector)) as QueryFn;\n    const maxTries = options.maxTries ?? Infinity;\n    const timeout = options.timeout ?? 10_000;\n    const ensureDomContentLoaded = options.ensureDomContentLoaded ?? true;\n\n    if (ensureDomContentLoaded) await awaitDomContentLoaded();\n\n    if (\"id\" in options) {\n        selector = `#${options.id}`;\n    }\n    else if (\"selector\" in options) {\n        selector = options.selector;\n    }\n    else {\n        throw new WaitForElementMissingOptionError(`missing options \"id\" or \"selector\"`);\n    }\n\n    let result: QueryFnResult | null = querySelector(parent, selector);\n\n    if (isNotEmpty(result)) return result;\n\n    let tries = 0;\n\n    const abortController = new AbortController;\n    const abortSignal: AbortSignal = abortController.signal;\n\n    options.abortSignal?.addEventListener(\"abort\", () => abortController.abort());\n\n    return new Promise((resolve, reject) => {\n        const mutation = observeMutation({ target: parent, abortSignal, childList: true, subtree: true, ...options.observerOptions }, () => {\n            result = querySelector(parent, selector);\n            if (isNotEmpty(result)) {\n                resolve(result);\n                mutation.disconnect();\n            }\n            else if (tries > maxTries) {\n                mutation.disconnect();\n                reject(new WaitForElementMaxTriesError(maxTries));\n            }\n            tries++;\n        });\n\n        if (timeout != false && timeout != Infinity) {\n            setTimeout(() => {\n                mutation.disconnect();\n                reject(new WaitForElementTimeoutError(timeout));\n            }, timeout);\n        }\n    });\n}\n\nexport function waitForElement<Elem extends Element>(selector: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem>;\nexport function waitForElement<Elem extends Element>(selector: string, parent: ParentNode, options?: Partial<QueryOptions<Elem>>): Promise<Elem>;\nexport function waitForElement(selector: string, arg1?: any, arg2?: any): any\n{\n    let options: QueryOptions<Element>;\n\n    if (arg1 instanceof Node && \"children\" in arg1) {\n        // arg1 is ParentNode\n        options = {\n            selector,\n            parent: arg1 as ParentNode,\n            ...arg2\n        };\n    }\n    else {\n        // arg1 is QueryOptions\n        options = {\n            selector,\n            ...arg1\n        };\n    }\n\n    return executeQuery({ selector, ...options });\n}\n\nexport function waitForElementAll<Elem extends Element>(selector: string, options?: Partial<QueryOptions<NodeListOf<Elem>>>): Promise<Elem[]>;\nexport function waitForElementAll<Elems extends Element[]>(selector: string, options?: Partial<QueryOptions<NodeListOf<Element>>>): Promise<Elems>;\nexport function waitForElementAll(selector: string, options?: Partial<QueryOptions<NodeListOf<Element>>>): Promise<Element[]>\n{\n    return executeQuery<NodeListOf<Element>>({ selector, ...options }).then(i => Array.from(i));\n}\n\nexport function waitForElementParent<Elem extends Element>(parent: ParentNode, selector: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem> {\n    return executeQuery({ selector, parent, ...options });\n}\n\nexport function waitForElementId<Elem extends Element>(id: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem> {\n    return executeQuery<Elem>({ id, ...options });\n}\n\nexport function waitForElementInf<Elem extends Element>(selector: string, options?: Partial<QueryOptions<Elem>>): Promise<Elem> {\n    return executeQuery({ selector, timeout: Infinity, ...options });\n}","// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\nconst DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';\nconst DATA_URL_DEFAULT_CHARSET = 'us-ascii';\n\nconst testParameter = (name, filters) => filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n\nconst supportedProtocols = new Set([\n\t'https:',\n\t'http:',\n\t'file:',\n]);\n\nconst hasCustomProtocol = urlString => {\n\ttry {\n\t\tconst {protocol} = new URL(urlString);\n\t\treturn protocol.endsWith(':') && !supportedProtocols.has(protocol);\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nconst normalizeDataURL = (urlString, {stripHash}) => {\n\tconst match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n\n\tif (!match) {\n\t\tthrow new Error(`Invalid URL: ${urlString}`);\n\t}\n\n\tlet {type, data, hash} = match.groups;\n\tconst mediaType = type.split(';');\n\thash = stripHash ? '' : hash;\n\n\tlet isBase64 = false;\n\tif (mediaType[mediaType.length - 1] === 'base64') {\n\t\tmediaType.pop();\n\t\tisBase64 = true;\n\t}\n\n\t// Lowercase MIME type\n\tconst mimeType = mediaType.shift()?.toLowerCase() ?? '';\n\tconst attributes = mediaType\n\t\t.map(attribute => {\n\t\t\tlet [key, value = ''] = attribute.split('=').map(string => string.trim());\n\n\t\t\t// Lowercase `charset`\n\t\t\tif (key === 'charset') {\n\t\t\t\tvalue = value.toLowerCase();\n\n\t\t\t\tif (value === DATA_URL_DEFAULT_CHARSET) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn `${key}${value ? `=${value}` : ''}`;\n\t\t})\n\t\t.filter(Boolean);\n\n\tconst normalizedMediaType = [\n\t\t...attributes,\n\t];\n\n\tif (isBase64) {\n\t\tnormalizedMediaType.push('base64');\n\t}\n\n\tif (normalizedMediaType.length > 0 || (mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE)) {\n\t\tnormalizedMediaType.unshift(mimeType);\n\t}\n\n\treturn `data:${normalizedMediaType.join(';')},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : ''}`;\n};\n\nexport default function normalizeUrl(urlString, options) {\n\toptions = {\n\t\tdefaultProtocol: 'http',\n\t\tnormalizeProtocol: true,\n\t\tforceHttp: false,\n\t\tforceHttps: false,\n\t\tstripAuthentication: true,\n\t\tstripHash: false,\n\t\tstripTextFragment: true,\n\t\tstripWWW: true,\n\t\tremoveQueryParameters: [/^utm_\\w+/i],\n\t\tremoveTrailingSlash: true,\n\t\tremoveSingleSlash: true,\n\t\tremoveDirectoryIndex: false,\n\t\tremoveExplicitPort: false,\n\t\tsortQueryParameters: true,\n\t\t...options,\n\t};\n\n\t// Legacy: Append `:` to the protocol if missing.\n\tif (typeof options.defaultProtocol === 'string' && !options.defaultProtocol.endsWith(':')) {\n\t\toptions.defaultProtocol = `${options.defaultProtocol}:`;\n\t}\n\n\turlString = urlString.trim();\n\n\t// Data URL\n\tif (/^data:/i.test(urlString)) {\n\t\treturn normalizeDataURL(urlString, options);\n\t}\n\n\tif (hasCustomProtocol(urlString)) {\n\t\treturn urlString;\n\t}\n\n\tconst hasRelativeProtocol = urlString.startsWith('//');\n\tconst isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n\n\t// Prepend protocol\n\tif (!isRelativeUrl) {\n\t\turlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n\t}\n\n\tconst urlObject = new URL(urlString);\n\n\tif (options.forceHttp && options.forceHttps) {\n\t\tthrow new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n\t}\n\n\tif (options.forceHttp && urlObject.protocol === 'https:') {\n\t\turlObject.protocol = 'http:';\n\t}\n\n\tif (options.forceHttps && urlObject.protocol === 'http:') {\n\t\turlObject.protocol = 'https:';\n\t}\n\n\t// Remove auth\n\tif (options.stripAuthentication) {\n\t\turlObject.username = '';\n\t\turlObject.password = '';\n\t}\n\n\t// Remove hash\n\tif (options.stripHash) {\n\t\turlObject.hash = '';\n\t} else if (options.stripTextFragment) {\n\t\turlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, '');\n\t}\n\n\t// Remove duplicate slashes if not preceded by a protocol\n\t// NOTE: This could be implemented using a single negative lookbehind\n\t// regex, but we avoid that to maintain compatibility with older js engines\n\t// which do not have support for that feature.\n\tif (urlObject.pathname) {\n\t\t// TODO: Replace everything below with `urlObject.pathname = urlObject.pathname.replace(/(?<!\\b[a-z][a-z\\d+\\-.]{1,50}:)\\/{2,}/g, '/');` when Safari supports negative lookbehind.\n\n\t\t// Split the string by occurrences of this protocol regex, and perform\n\t\t// duplicate-slash replacement on the strings between those occurrences\n\t\t// (if any).\n\t\tconst protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\n\n\t\tlet lastIndex = 0;\n\t\tlet result = '';\n\t\tfor (;;) {\n\t\t\tconst match = protocolRegex.exec(urlObject.pathname);\n\t\t\tif (!match) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst protocol = match[0];\n\t\t\tconst protocolAtIndex = match.index;\n\t\t\tconst intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\n\n\t\t\tresult += intermediate.replace(/\\/{2,}/g, '/');\n\t\t\tresult += protocol;\n\t\t\tlastIndex = protocolAtIndex + protocol.length;\n\t\t}\n\n\t\tconst remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\n\t\tresult += remnant.replace(/\\/{2,}/g, '/');\n\n\t\turlObject.pathname = result;\n\t}\n\n\t// Decode URI octets\n\tif (urlObject.pathname) {\n\t\ttry {\n\t\t\turlObject.pathname = decodeURI(urlObject.pathname);\n\t\t} catch {}\n\t}\n\n\t// Remove directory index\n\tif (options.removeDirectoryIndex === true) {\n\t\toptions.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n\t}\n\n\tif (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n\t\tlet pathComponents = urlObject.pathname.split('/');\n\t\tconst lastComponent = pathComponents[pathComponents.length - 1];\n\n\t\tif (testParameter(lastComponent, options.removeDirectoryIndex)) {\n\t\t\tpathComponents = pathComponents.slice(0, -1);\n\t\t\turlObject.pathname = pathComponents.slice(1).join('/') + '/';\n\t\t}\n\t}\n\n\tif (urlObject.hostname) {\n\t\t// Remove trailing dot\n\t\turlObject.hostname = urlObject.hostname.replace(/\\.$/, '');\n\n\t\t// Remove `www.`\n\t\tif (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\n\t\t\t// Each label should be max 63 at length (min: 1).\n\t\t\t// Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n\t\t\t// Each TLD should be up to 63 characters long (min: 2).\n\t\t\t// It is technically possible to have a single character TLD, but none currently exist.\n\t\t\turlObject.hostname = urlObject.hostname.replace(/^www\\./, '');\n\t\t}\n\t}\n\n\t// Remove query unwanted parameters\n\tif (Array.isArray(options.removeQueryParameters)) {\n\t\t// eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n\t\tfor (const key of [...urlObject.searchParams.keys()]) {\n\t\t\tif (testParameter(key, options.removeQueryParameters)) {\n\t\t\t\turlObject.searchParams.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\n\t\turlObject.search = '';\n\t}\n\n\t// Keep wanted query parameters\n\tif (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\n\t\t// eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n\t\tfor (const key of [...urlObject.searchParams.keys()]) {\n\t\t\tif (!testParameter(key, options.keepQueryParameters)) {\n\t\t\t\turlObject.searchParams.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Sort query parameters\n\tif (options.sortQueryParameters) {\n\t\turlObject.searchParams.sort();\n\n\t\t// Calling `.sort()` encodes the search parameters, so we need to decode them again.\n\t\ttry {\n\t\t\turlObject.search = decodeURIComponent(urlObject.search);\n\t\t} catch {}\n\t}\n\n\tif (options.removeTrailingSlash) {\n\t\turlObject.pathname = urlObject.pathname.replace(/\\/$/, '');\n\t}\n\n\t// Remove an explicit port number, excluding a default port number, if applicable\n\tif (options.removeExplicitPort && urlObject.port) {\n\t\turlObject.port = '';\n\t}\n\n\tconst oldUrlString = urlString;\n\n\t// Take advantage of many of the Node `url` normalizations\n\turlString = urlObject.toString();\n\n\tif (!options.removeSingleSlash && urlObject.pathname === '/' && !oldUrlString.endsWith('/') && urlObject.hash === '') {\n\t\turlString = urlString.replace(/\\/$/, '');\n\t}\n\n\t// Remove ending `/` unless removeSingleSlash is false\n\tif ((options.removeTrailingSlash || urlObject.pathname === '/') && urlObject.hash === '' && options.removeSingleSlash) {\n\t\turlString = urlString.replace(/\\/$/, '');\n\t}\n\n\t// Restore relative protocol, if applicable\n\tif (hasRelativeProtocol && !options.normalizeProtocol) {\n\t\turlString = urlString.replace(/^http:\\/\\//, '//');\n\t}\n\n\t// Remove http/https\n\tif (options.stripProtocol) {\n\t\turlString = urlString.replace(/^(?:https?:)?\\/\\//, '');\n\t}\n\n\treturn urlString;\n}\n","\nimport normalizeUrl from 'normalize-url';\n\nexport type Matcher = string | RegExp | URL | true;\n\nexport function urlMatches(matcher: Matcher, url?: string) {\n    let result = false;\n\n    if (url == null) return false;\n    if (matcher === true) return true;\n    \n    url = normalizeUrl(url);\n\n    if (matcher instanceof URL) {\n        result = normalizeUrl(matcher.href) == url;\n    }\n    if (typeof matcher == \"string\") {\n        result = normalizeUrl(matcher) == url;\n    }\n    if (matcher instanceof RegExp) {\n        result = matcher.test(url);\n    }\n\n    return result;\n}\n\nexport function headersMatches(headerMatchers: Record<string, Matcher>, headers: Headers) {\n    let result = false;\n\n    const headerMatchersKeys = Object.keys(headerMatchers);\n\n    if (headerMatchersKeys.length == 0) return true;\n\n    for (const key of Object.keys(headerMatchers)) {\n        const matcher = headerMatchers[key];\n        const headerValue = headers.get(key);\n        \n        if (headerValue == null) return false;\n        if (matcher === true) return true;\n\n        if (matcher instanceof URL) {\n            result = normalizeUrl(matcher.href) == normalizeUrl(headerValue);\n        }\n        else if (matcher instanceof RegExp) {\n            result = matcher.test(headerValue);\n        }\n        else {\n            result = String(matcher) == headerValue;\n        }\n\n        if (!result) return false;\n    }\n\n    return result;\n}","\nimport { Matcher, urlMatches, headersMatches } from \"./network\";\n\nexport interface RequestRule {\n    type: \"request\";\n    url: Matcher;\n    headers?: Record<string, Matcher>;\n    block?: boolean;\n    redirect?: URL | string | false;\n    callback: (request: InterceptedRequest) => void;\n}\n\nexport interface ResponseRule {\n    type: \"response\";\n    url: Matcher;\n    headers?: Record<string, Matcher>;\n    callback: (response: InterceptedResponse) => void;\n}\n\nexport interface InterceptedRequest extends Request {\n    blocked: boolean;\n}\n\nexport interface InterceptedResponse extends Response {}\n\nexport type RuleMap = {\n    request: RequestRule;\n    response: ResponseRule;\n};\n\nexport type Rule = RequestRule | ResponseRule;\n\nfunction fetchInterceptorFactory(interceptor: NetworkInterceptor, windowFetch: typeof window.fetch) {\n    return async function fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response> {\n        const request = new Request(input, init);\n        const interceptedRequest = interceptor.interceptRequest(request);\n\n        if (interceptedRequest.blocked) {\n            const responseError = Response.error();\n            return responseError;\n        }\n        else {\n            return windowFetch(interceptedRequest).then(res => {\n                const interceptedResponse = interceptor.interceptResponse(res);\n                return interceptedResponse;\n            });\n        }\n    }\n}\n\nfunction xmlHttpRequestInterceptorFactory(interceptor: NetworkInterceptor, windowXmlHttpRequest: typeof window.XMLHttpRequest) {\n    class XMLHttpRequest extends windowXmlHttpRequest {\n        #headers = new Headers;\n\n        constructor () {\n            super();\n            this.addEventListener(\"load\", () => {\n                const options: ResponseInit = {\n                    status: this.status,\n                    statusText: this.statusText,\n                    headers: this.#headers,\n                };\n            });\n        }\n\n        setRequestHeader(name: string, value: string): void {\n            this.#headers.set(name, value);\n            super.setRequestHeader(name, value);\n        }\n    }\n    return windowXmlHttpRequest;\n}\n\nexport interface NetworkInterceptorOptions {\n    global: Record<string, any>;\n    fetchKey: string;\n    xmlHttpRequestKey: string;\n}\n\nexport class NetworkInterceptor {\n    #requestRules: Required<RequestRule>[] = [];\n    #responseRules: Required<ResponseRule>[] = [];\n    #windowFetch: typeof window.fetch;\n    #patchedFetch: typeof window.fetch;\n    #windowXmlHttpRequest: typeof window.XMLHttpRequest;\n    #patchedXmlHttpRequest: typeof window.XMLHttpRequest;\n\n    get windowFetch() {\n        return this.#windowFetch;\n    }\n\n    get patchedFetch() {\n        return this.#patchedFetch;\n    }\n\n    constructor ({ global = globalThis, fetchKey = \"fetch\", xmlHttpRequestKey = \"XMLHttpRequest\" }: Partial<NetworkInterceptorOptions> = {}) {\n        this.#windowFetch = global[fetchKey];\n        this.#patchedFetch = global[fetchKey] = fetchInterceptorFactory(this, this.#windowFetch);\n        this.#windowXmlHttpRequest = global[xmlHttpRequestKey];\n        this.#patchedXmlHttpRequest = global[xmlHttpRequestKey] /* = xmlHttpRequestInterceptorFactory(this, this.#windowXmlHttpRequest) */;\n    }\n\n    interceptRequest(request: Request): InterceptedRequest {\n        let interceptedRequest = request as InterceptedRequest;\n        interceptedRequest.blocked = false;\n\n        for (const rule of this.#requestRules) {\n            const filterPass = urlMatches(rule.url, interceptedRequest.url) && headersMatches(rule.headers, interceptedRequest.headers);\n\n            if (!filterPass) continue;\n\n            if (rule.block) {\n                interceptedRequest.blocked = true;\n                break;\n            }\n\n            if (rule.redirect) {\n                interceptedRequest = new Request(rule.redirect, interceptedRequest) as InterceptedRequest;\n                interceptedRequest.blocked = false;\n            }\n\n            rule.callback(interceptedRequest);\n\n            if (interceptedRequest.blocked) {\n                break;\n            }\n        }\n\n        return interceptedRequest;\n    }\n\n    interceptResponse(response: Response): InterceptedResponse {\n        const interceptedResponse = response as InterceptedResponse;\n\n        for (const rule of this.#responseRules) {\n            const filterPass = urlMatches(rule.url, interceptedResponse.url) && headersMatches(rule.headers, interceptedResponse.headers);\n\n            if (!filterPass) continue;\n\n            rule.callback(interceptedResponse);\n        }\n\n        return interceptedResponse;\n    }\n\n    addRule(rule: RequestRule | ResponseRule): Readonly<Rule>;\n    addRule<T extends keyof RuleMap>\n        (type: T, url: Matcher, callback: RuleMap[T][\"callback\"], rule?: Omit<RuleMap[T], \"url\" | \"callback\">): Readonly<Rule>;\n    addRule\n        (type: string, url: Matcher, callback: (resource: InterceptedRequest | InterceptedResponse) => void, rule?: Omit<Rule, \"url\" | \"callback\">): Readonly<Rule>;\n    addRule(arg0: any, arg1?: any, arg2?: any, arg3?: any): Readonly<Rule> {\n        let rule: Rule;\n\n        if (arg0.constructor == Object) {\n            rule = arg0;\n\n            if (!rule.type) {\n                throw new TypeError(\"missing type option\");\n            }\n    \n            if (!rule.callback) {\n                throw new TypeError(\"missing callback option\");\n            }\n        }\n        else {\n            const type: string = arg0;\n            const url: Matcher = arg1;\n            const callback: Function = arg2;\n\n            rule = {\n                type, url, callback,\n                ...arg3\n            } satisfies Rule;\n        }\n\n        rule.headers ??= {};\n\n        if (rule.type == \"request\") {\n            this.#requestRules.push(rule as Required<RequestRule>);\n        }\n        else if (rule.type == \"response\") {\n            this.#responseRules.push(rule as Required<ResponseRule>);\n        }\n\n        return rule;\n    }\n\n    removeRule(rule: Rule) {\n        if (rule.type == \"request\") {\n            const ruleIndex = this.#requestRules.findIndex(r => r == rule);\n            this.#requestRules.splice(ruleIndex, 1);\n        }\n        else {\n            const ruleIndex = this.#responseRules.findIndex(r => r == rule);\n            this.#responseRules.splice(ruleIndex, 1);\n        }\n    }\n\n    clearRules() {\n        this.#requestRules.length = 0;\n        this.#responseRules.length = 0;\n    }\n\n    patchFetch(): void {\n        window.fetch = this.#patchedFetch;\n    }\n\n    restoreFetch(): void {\n        window.fetch = this.#windowFetch;\n    }\n}"],"names":["text","s","template","subst","completeString","i","elem","dict","substRegex","_","varKey","_a","worker","__publicField","error","state","job","result","options","returnValue","ev","data","_WorkerJQ","url","__privateAdd","_jobQueue","_currentlyExecutingJob","_worker","_state","__privateSet","callback","args","__privateGet","event","workerScriptError","message","messageExecutionResult","arg0","arg1","jobIndex","type","test","timeout","resolve","timeoutId","childMessage","reject","jobFinishedCallback","jobErrorCallback","target","abortSignal","once","observer","records","ms","maxTries","x","selector","parent","querySelector","tries","abortController","mutation","arg2","id","name","filters","filter","urlString","protocol","stripHash","match","hash","mediaType","isBase64","mimeType","normalizedMediaType","attribute","key","value","string","hasRelativeProtocol","urlObject","protocolRegex","lastIndex","protocolAtIndex","intermediate","remnant","pathComponents","lastComponent","oldUrlString","matcher","headerMatchers","headers","headerValue","interceptor","windowFetch","input","init","request","interceptedRequest","res","global","fetchKey","xmlHttpRequestKey","_requestRules","_responseRules","_windowFetch","_patchedFetch","_windowXmlHttpRequest","_patchedXmlHttpRequest","rule","response","interceptedResponse","arg3","ruleIndex","r"],"mappings":"gvBAEO,MAAM,cAAgB,CACzB,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,SACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,QACT,EAEO,SAAS,WAAWA,EAAc,CACrC,OAAOA,EAAK,QAAQ,eAAiBC,GAAM,cAAcA,CAA+B,CAAC,CAC7F,CAEgB,SAAA,KAA2BC,KAAgCC,EAAoB,CAC3F,MAAMC,EAAiB,CAAA,EAEvB,QAASC,EAAI,EAAGA,EAAIH,EAAS,OAAQG,IAClBD,EAAA,KAAKF,EAASG,CAAC,CAAC,EAC3BF,EAAME,CAAC,GAAGD,EAAe,KAAK,WAAW,OAAOD,EAAME,CAAC,CAAC,CAAC,CAAC,EAGlE,OAAO,SAAeD,EAAe,KAAK,EAAE,CAAC,CACjD,CAEO,SAAS,SAA+BJ,EAAoB,CACzD,MAAAM,EAAO,SAAS,cAAc,KAAK,EACzC,OAAAA,EAAK,UAAYN,EACN,WAAA,IAAMM,EAAK,OAAA,CAAQ,EACvBA,EAAK,SAAS,CAAC,CAC1B,CCzBO,SAAS,aAAaN,EAAc,CAChC,OAAAA,EAAK,QAAQ,sBAAuB,MAAM,CACrD,CAEO,SAAS,aACRA,EACAO,EACA,CAAE,MAAAJ,EAAQ,CAAE,OAAQ,WAAY,IAAK,GAAM,CAAA,EAAkC,CAAA,EACrF,CACI,MAAMK,EAAaL,EAAM,OACpB,MAAMA,EAAM,GAAG,EACf,IAAI,YAAY,EAChB,KAAK,OAAO,oBAAoB,EACrC,OAAOH,EAAK,QAAQ,IAAI,OAAOQ,EAAY,GAAG,EAAG,CAACC,EAAGC,IAAW,OAAA,OAAAC,EAAAJ,EAAKG,CAAM,IAAX,YAAAC,EAAc,WAAU,CAC5F,CCnBO,MAAM,+BAA+B,KAAM,CAI9C,YAAaC,EAAkB,CAC3B,MAAM,wBAAwB,EAJlCC,EAAA,YAAO,KAAK,YAAY,MACxBA,EAAA,eAII,KAAK,OAASD,CAClB,CACJ,CAEO,MAAM,0BAA0B,KAAM,CAIzC,YAAaA,EAAkBE,EAAY,CACjC,MAAA,kCAAkCA,EAAM,OAAO,EAJzDD,EAAA,YAAO,KAAK,YAAY,MACxBA,EAAA,eAII,KAAK,OAASD,EACd,KAAK,MAAQE,CACjB,CACJ,CAEO,MAAM,wBAAwB,KAAM,CAIvC,YAAaF,EAAkBG,EAAe,CAC1C,MAAM,4BAA4BA,IAAQ,EAJ9CF,EAAA,YAAO,KAAK,YAAY,MACxBA,EAAA,eAII,KAAK,OAASD,CAClB,CACJ,CAEO,MAAM,oBAAoB,KAAM,CAKnC,YAAaA,EAAkBI,EAAe,CAC1C,MAAM,yBAAyB,EALnCH,EAAA,YAAO,KAAK,YAAY,MACxBA,EAAA,eACAA,EAAA,YAII,KAAK,OAASD,EACd,KAAK,IAAMI,CACf,CACJ,CCjBO,MAAM,yBAAyB,KAAM,CAIxC,YAAa,CAAE,IAAAA,EAAK,OAAAC,CAAA,EAA0CC,EAAqB,CAC/E,MAAM,eAAgBA,CAAO,EAJjCL,EAAA,YACAA,EAAA,eAII,KAAK,IAAMG,EACX,KAAK,OAASC,CAClB,CACJ,CAEO,MAAM,sBAAsB,KAAM,CAIrC,YAAa,CAAE,IAAAD,EAAK,MAAAF,CAAA,EAAwCI,EAAqB,CAC7E,MAAM,YAAaA,CAAO,EAJ9BL,EAAA,YACAA,EAAA,cAII,KAAK,IAAMG,EACX,KAAK,MAAQF,CACjB,CACJ,CAEA,SAAS,YAAa,CAClB,IAAI,MAA2B,SAE/B,SAAS,kBAAkB,KAA4D,CAC3E,MAAA,UACR,MAAM,SAAW,KAAK,IAAI,KAAK,eAAe,EACxC,KAAO,KAAK,KAEd,GAAA,CACM,MAAAK,EAAc,SAAS,GAAG,IAAI,EACpC,KAAK,YAAY,CACb,KAAM,mBACN,QAAS,GACT,YAAAA,CAAA,CAC0C,QAE3CL,GACH,KAAK,YAAY,CACb,KAAM,mBACN,QAAS,GACT,MAAAA,CAAA,CACwC,CAChD,CACQ,MAAA,QACZ,CAEA,eAAe,uBAAuB,KAAmC,CAC7D,MAAA,UACR,MAAM,SAAW,KAAK,IAAI,KAAK,eAAe,EACxC,KAAO,KAAK,KAElB,SAAS,GAAG,IAAI,EACX,KAAoBK,GAAA,CACjB,KAAK,YAAY,CACb,KAAM,mBACN,QAAS,GACT,YAAAA,CAAA,CAC0C,EACtC,MAAA,QAAA,CACX,EACA,MAAeL,GAAA,CACZ,KAAK,YAAY,CACb,KAAM,mBACN,QAAS,GACT,MAAAA,CAAA,CACwC,EACpC,MAAA,QAAA,CACX,CACT,CAEK,KAAA,iBAAiB,UAAYM,GAAO,CACrC,MAAMC,EAAOD,EAAG,KAEhB,OAAQC,EAAK,KAAM,CACnB,IAAK,SACD,KAAK,YAAY,CACb,KAAM,SACN,OAAQ,KAAA,CACkB,EAC9B,MACJ,IAAK,SACO,MAAA,SACR,KACJ,CAEA,GAAI,OAAS,YAEb,OAAQA,EAAK,KAAM,CACnB,IAAK,UACD,kBAAkBA,CAAI,EACtB,MACJ,IAAK,gBACGA,EAAK,YACL,uBAAuBA,CAAI,EAG3B,kBAAkBA,CAAI,EAE1B,MACJ,IAAK,UACO,MAAA,YACR,MACJ,IAAK,WACO,MAAA,WAER,KAAK,YAAY,CACb,KAAM,SACN,OAAQ,UAAA,CACkB,EAE9B,KAAK,MAAM,EACX,KACJ,CAAA,CACH,CACL,CAOO,MAAMC,EAAN,cAAuB,WAAY,CAetC,YAAa,CAAE,IAAAC,CAAI,EAA8B,GAAI,CAC3C,QANVC,EAAA,KAAAC,EAAwB,CAAA,GACxBD,EAAA,KAAAE,EAA0C,MAC1CF,EAAA,KAAAG,EAAA,QACAH,EAAA,KAAAI,EAAmF,UAqNnFf,EAAA,oBAAe,KAAK,UAhNhBgB,EAAA,KAAKF,EAAU,IAAI,OAAOJ,GAAOD,EAAS,SAAS,GAEnD,KAAK,KAAK,CACd,CAlBA,OAAO,UAAsCQ,EAAqCC,EAA0C,CACjH,MAAA,CACH,SAAAD,EACA,KAAOC,GAAQ,CAAC,CAAA,CAExB,CAeA,IAAI,QAAS,CACT,OAAOC,EAAA,KAAKL,EAChB,CAEA,IAAI,OAAOf,EAAgB,CACvB,KAAK,OAAOA,CAAM,CACtB,CAEA,IAAI,OAAQ,CACR,OAAOoB,EAAA,KAAKJ,EAChB,CAEA,MAAO,CACH,GAAII,EAAA,KAAKJ,IAAU,UAAYI,EAAA,KAAKP,GAAU,OAAS,EAAG,CACtDI,EAAA,KAAKD,EAAS,WACd,MAAMZ,EAAMa,EAAA,KAAKH,EAAyBM,EAAA,KAAKP,GAAU,OAEzD,KAAK,QAAQT,CAAG,EAAE,KAAeC,GAAA,CAC7BY,EAAA,KAAKD,EAAS,UACdC,EAAA,KAAKH,EAAyB,MAC9B,MAAMO,EAAQ,IAAI,iBAAiB,CAAE,IAAAjB,EAAK,OAAAC,CAAQ,CAAA,EAClD,KAAK,cAAcgB,CAAK,EACxB,KAAK,KAAK,CAAA,CACb,EAAE,MAAenB,GAAA,CACd,MAAMoB,EAAoBpB,EAC1B,QAAQ,MAAMoB,CAAiB,EAC/BL,EAAA,KAAKD,EAAS,UACdC,EAAA,KAAKH,EAAyB,MACxB,MAAAO,EAAQ,IAAI,cAAc,CAAE,IAAAjB,EAAK,MAAOkB,EAAkB,MAAO,EACvE,KAAK,cAAcD,CAAK,EACxB,KAAK,KAAK,CAAA,CACb,EAET,CAEA,YAAa,CACTD,EAAA,KAAKP,GAAU,OAAS,CAC5B,CAEA,OAAOb,EAAiB,CACTA,MAAA,IAAI,OAAOU,EAAS,SAAS,GACxC,KAAK,UAAU,EACfO,EAAA,KAAKD,EAAS,UACdC,EAAA,KAAKF,EAAUf,GACf,KAAK,KAAK,CACd,CAEA,WAAY,CACRoB,EAAA,KAAKL,GAAQ,YACbE,EAAA,KAAKD,EAAS,aAClB,CAEA,MAAM,QAAQhB,EAAiB,CAChBA,MAAA,IAAI,OAAOU,EAAS,SAAS,GACxC,MAAM,KAAK,WACXO,EAAA,KAAKD,EAAS,UACdC,EAAA,KAAKF,EAAUf,GACf,KAAK,KAAK,CACd,CAEA,MAAM,UAAW,CACb,OAAAoB,EAAA,KAAKL,GAAQ,YAAY,CACrB,KAAM,UAAA,CACoB,EAEvB,KAAK,aAAa,CAAE,KAAM,SAAU,KAAOQ,GAAYA,EAAQ,QAAU,UAAA,CAAY,EAAE,KAAelB,IACzGY,EAAA,KAAKD,EAAS,YACPX,EACV,CACL,CAEA,MAAM,SAAU,CACZ,OAAAe,EAAA,KAAKL,GAAQ,YAAY,CACrB,KAAM,SAAA,CACsB,EAEhCE,EAAA,KAAKD,EAAS,aAEP,KAAK,aAAa,CAAE,KAAM,SAAU,KAAiBO,GAAAA,EAAQ,QAAU,WAAa,CAAA,CAC/F,CAEA,MAAM,QAAS,CACX,OAAAH,EAAA,KAAKL,GAAQ,YAAY,CACrB,KAAM,QAAA,CACqB,EAExB,KAAK,aAAa,CAAE,KAAM,SAAU,KAAiBQ,GAAAA,EAAQ,QAAU,QAAA,CAAU,EAAE,KAAelB,IACrGY,EAAA,KAAKD,EAAS,UACd,KAAK,KAAK,EACHX,EACV,CACL,CAEA,MAAM,QAAgBD,EAAmC,CACrD,MAAMK,EAA+B,CACjC,KAAM,UACN,aAAcL,EAAI,SAAS,SAAS,EACpC,KAAMA,EAAI,IAAA,EAGTgB,EAAA,KAAAL,GAAQ,YAAYN,CAAI,EAE7B,MAAMe,EAAyB,MAAM,KAAK,aAAiC,CAAE,KAAM,mBAAoB,EAEvG,GAAIA,EAAuB,QACvB,OAAOA,EAAuB,YAG9B,MAAM,IAAI,kBAAkB,KAAMA,EAAuB,KAAK,CAEtE,CAEA,MAAM,IAAgCN,EAAqCC,EAA8B,CACrG,MAAMf,EAAM,KAAK,MAAMc,EAAUC,CAAI,EAC9B,OAAA,KAAK,SAASf,CAAG,CAC5B,CAIA,MAAMqB,EAAWC,EACjB,CACI,GAAI,EAAEN,EAAA,KAAKJ,IAAU,UAAYI,EAAA,KAAKJ,IAAU,WAAY,MAAM,IAAI,gBAAgB,KAAMI,EAAA,KAAKJ,EAAM,EAEnG,IAAAZ,EAEA,OAAA,OAAOqB,GAAQ,WACTrB,EAAAM,EAAS,UAAUe,EAAMC,CAAI,EAG7BtB,EAAAqB,EAGLL,EAAA,KAAAP,GAAU,KAAKT,CAAG,EAEvB,KAAK,KAAK,EAEHA,CACX,CAEA,OAAOA,EAAe,CAClB,MAAMuB,EAAWP,EAAA,KAAKP,GAAU,QAAQT,CAAG,EAE3C,OAAIuB,GAAY,GACL,IAGFP,EAAA,KAAAP,GAAU,OAAOc,EAAU,CAAC,EAC1B,GAEf,CAGA,aAA2C,CAAE,KAAAC,EAAM,KAAAC,EAAM,QAAAC,EAAU,GAAO,EAA+B,GAAsB,CACpH,OAAA,IAAI,QAAmBC,GAAA,CACtB,IAAAC,EAEJZ,EAAA,KAAKL,GAAQ,iBAAiB,UAAYP,GAAO,CAC7C,MAAMyB,EAA6BzB,EAAG,KAClCoB,GACIK,EAAa,MAAQL,GAIzBC,GACI,CAACA,EAAKI,CAAY,IAItBD,GAAW,aAAaA,CAAS,EACrCD,EAAQE,CAAuB,EAAA,CAClC,EAEG,OAAOH,GAAW,WAClBE,EAAY,WAAW,IAAM,CACnB,MAAA,IAAI,uBAAuB,IAAI,GACtCF,CAAO,EACd,CACH,CACL,CAEA,SAAiB1B,EAAmC,CAChD,GAAI,CAACgB,EAAA,KAAKP,GAAU,SAAST,CAAG,GAAKgB,EAAA,KAAKN,IAA0BV,EAAW,MAAA,IAAI,YAAY,KAAMA,CAAG,EAExG,OAAO,IAAI,QAAQ,CAAC2B,EAASG,IAAW,CAC9B,MAAAC,EAAuB3B,GAAY,CACrC,MAAMa,EAAQb,EACVa,EAAM,KAAOjB,IACb2B,EAAQV,EAAM,MAAM,EACf,KAAA,oBAAoB,eAAgBc,CAAmB,EAChE,EAEEC,EAAoB5B,GAAY,CAClC,MAAMa,EAAQb,EACVa,EAAM,KAAOjB,IACb8B,EAAOb,EAAM,KAAK,EACb,KAAA,oBAAoB,YAAac,CAAmB,EAC7D,EAEC,KAAA,iBAAiB,eAAgBA,CAAmB,EACpD,KAAA,iBAAiB,YAAaC,CAAgB,CAAA,CACtD,CACL,CAGJ,EAnOO,IAAM,SAAN1B,EAUHG,EAAA,YACAC,EAAA,YACAC,EAAA,YACAC,EAAA,YAZAf,EADS,SACO,YAAY,uCAAuC,WAAW,SAAS,iBC1H3E,SAAA,gBAAgB,CAAE,OAAAoC,EAAQ,YAAAC,EAAa,KAAAC,EAAM,GAAGjC,GAAmCY,EAAqD,CAC/I,MAAAsB,EAAW,IAAI,iBAA4BC,GAAA,CACxCF,GAAMC,EAAS,WAAW,EACrBtB,EAAA,CAAE,QAAAuB,EAAS,SAAAD,CAAA,CAAU,CAAA,CAClC,EAEQ,OAAAA,EAAA,QAAQH,EAAQ/B,CAAO,EAEnBgC,GAAA,MAAAA,EAAA,iBAAiB,QAAS,IAAM,CACzCE,EAAS,WAAW,CAAA,GAGjBA,CACV,CAQgB,SAAA,oBAAoBlC,EAAiCY,EAAqD,CACtH,OAAO,gBAAgB,CAAE,KAAM,GAAM,GAAGZ,CAAA,EAAWY,CAAQ,CAC/D,CAQO,SAAS,qBAAqB,CAAE,OAAAmB,EAAQ,YAAAC,EAAa,GAAGhC,CAAA,EAAmCY,EAAuG,CAC9L,OAAA,IAAI,QAAmBa,GAAA,CACpB,MAAAS,EAAW,IAAI,iBAA4BC,GAAA,CAC7CD,EAAS,WAAW,EACZT,EAAA,CAAE,QAAAU,EAAS,SAAAD,CAAA,CAAU,CAAA,CAChC,EAEQA,EAAA,QAAQH,EAAQ/B,CAAO,EAEnBgC,GAAA,MAAAA,EAAA,iBAAiB,QAAS,IAAM,CACzCE,EAAS,WAAW,CAAA,EACvB,CACJ,CACL,CAEO,MAAM,qBAAuB,gBC1E7B,MAAM,mCAAmC,KAAM,CAGlD,YAAaE,EAAY,CACrB,MAAM,gCAAgCA,KAAM,EAHhDzC,EAAA,YAAO,KAAK,YAAY,KAIxB,CACJ,CAEO,MAAM,oCAAoC,KAAM,CAGnD,YAAa0C,EAAkB,CAC3B,MAAM,6CAA6CA,IAAW,EAHlE1C,EAAA,YAAO,KAAK,YAAY,KAIxB,CACJ,CAEO,MAAM,yCAAyC,KAAM,CAArD,kCACHA,EAAA,YAAO,KAAK,YAAY,MAC5B,CC0EA,eAAsB,uBAAuC,CAClD,OAAA,IAAI,QAAmB8B,GAAA,CAC1B,GAAI,SAAS,YAAc,UAAW,OAAOA,EAAQ,EACrD,SAAS,iBAAiB,mBAAoB,IAAMA,EAAS,CAAA,CAAA,CAChE,CACL,CAEA,SAAS,WAAca,EAA6B,CAChD,OAAIA,aAAa,UAAYA,EAAE,OAAS,EAC7B,GAGAA,GAAK,IAEpB,CAEA,eAAsB,aAEjBtC,EACL,OACQ,IAAAuC,EACE,MAAAC,EAASxC,EAAQ,QAAU,SAAS,KACpCyC,EAAyBzC,EAAQ,gBAAkB,CAACwC,EAAQD,IAAaC,EAAO,cAAcD,CAAQ,GACtGF,EAAWrC,EAAQ,UAAY,IAC/BwB,EAAUxB,EAAQ,SAAW,IAKnC,IAJ+BA,EAAQ,wBAA0B,KAErC,MAAM,sBAAsB,EAEpD,OAAQA,EACRuC,EAAW,IAAIvC,EAAQ,aAElB,aAAcA,EACnBuC,EAAWvC,EAAQ,aAGb,OAAA,IAAI,iCAAiC,oCAAoC,EAG/E,IAAAD,EAA+B0C,EAAcD,EAAQD,CAAQ,EAEjE,GAAI,WAAWxC,CAAM,EAAU,OAAAA,EAE/B,IAAI2C,EAAQ,EAEZ,MAAMC,EAAkB,IAAI,gBACtBX,EAA2BW,EAAgB,OAEjD,OAAAlD,EAAAO,EAAQ,cAAR,MAAAP,EAAqB,iBAAiB,QAAS,IAAMkD,EAAgB,SAE9D,IAAI,QAAQ,CAAClB,EAASG,IAAW,CACpC,MAAMgB,EAAW,gBAAgB,CAAE,OAAQJ,EAAQ,YAAAR,EAAa,UAAW,GAAM,QAAS,GAAM,GAAGhC,EAAQ,iBAAmB,IAAM,CACvHD,EAAA0C,EAAcD,EAAQD,CAAQ,EACnC,WAAWxC,CAAM,GACjB0B,EAAQ1B,CAAM,EACd6C,EAAS,WAAW,GAEfF,EAAQL,IACbO,EAAS,WAAW,EACbhB,EAAA,IAAI,4BAA4BS,CAAQ,CAAC,GAEpDK,GAAA,CACH,EAEGlB,GAAW,IAASA,GAAW,KAC/B,WAAW,IAAM,CACboB,EAAS,WAAW,EACbhB,EAAA,IAAI,2BAA2BJ,CAAO,CAAC,GAC/CA,CAAO,CACd,CACH,CACL,CAIgB,SAAA,eAAee,EAAkBnB,EAAYyB,EAC7D,CACQ,IAAA7C,EAEA,OAAAoB,aAAgB,MAAQ,aAAcA,EAE5BpB,EAAA,CACN,SAAAuC,EACA,OAAQnB,EACR,GAAGyB,CAAA,EAKG7C,EAAA,CACN,SAAAuC,EACA,GAAGnB,CAAA,EAIJ,aAAa,CAAE,SAAAmB,EAAU,GAAGvC,CAAS,CAAA,CAChD,CAIgB,SAAA,kBAAkBuC,EAAkBvC,EACpD,CACI,OAAO,aAAkC,CAAE,SAAAuC,EAAU,GAAGvC,CAAQ,CAAC,EAAE,KAAUb,GAAA,MAAM,KAAKA,CAAC,CAAC,CAC9F,CAEgB,SAAA,qBAA2CqD,EAAoBD,EAAkBvC,EAAsD,CACnJ,OAAO,aAAa,CAAE,SAAAuC,EAAU,OAAAC,EAAQ,GAAGxC,CAAS,CAAA,CACxD,CAEgB,SAAA,iBAAuC8C,EAAY9C,EAAsD,CACrH,OAAO,aAAmB,CAAE,GAAA8C,EAAI,GAAG9C,CAAS,CAAA,CAChD,CAEgB,SAAA,kBAAwCuC,EAAkBvC,EAAsD,CAC5H,OAAO,aAAa,CAAE,SAAAuC,EAAU,QAAS,IAAU,GAAGvC,EAAS,CACnE,CC/MA,MAAM,2BAA6B,aAC7B,yBAA2B,WAE3B,cAAgB,CAAC+C,EAAMC,IAAYA,EAAQ,KAAKC,GAAUA,aAAkB,OAASA,EAAO,KAAKF,CAAI,EAAIE,IAAWF,CAAI,EAExH,mBAAqB,IAAI,IAAI,CAClC,SACA,QACA,OACD,CAAC,EAEK,kBAAoBG,GAAa,CACtC,GAAI,CACH,KAAM,CAAC,SAAAC,CAAQ,EAAI,IAAI,IAAID,CAAS,EACpC,OAAOC,EAAS,SAAS,GAAG,GAAK,CAAC,mBAAmB,IAAIA,CAAQ,CACnE,MAAG,CACD,MAAO,EACP,CACF,EAEM,iBAAmB,CAACD,EAAW,CAAC,UAAAE,CAAS,IAAM,OACpD,MAAMC,EAAQ,0DAA0D,KAAKH,CAAS,EAEtF,GAAI,CAACG,EACJ,MAAM,IAAI,MAAM,gBAAgBH,GAAW,EAG5C,GAAI,CAAC,KAAA5B,EAAM,KAAAnB,EAAM,KAAAmD,CAAI,EAAID,EAAM,OAC/B,MAAME,EAAYjC,EAAK,MAAM,GAAG,EAChCgC,EAAOF,EAAY,GAAKE,EAExB,IAAIE,EAAW,GACXD,EAAUA,EAAU,OAAS,CAAC,IAAM,WACvCA,EAAU,IAAG,EACbC,EAAW,IAIZ,MAAMC,IAAWhE,EAAA8D,EAAU,MAAO,IAAjB,YAAA9D,EAAmB,gBAAiB,GAkB/CiE,EAAsB,CAC3B,GAlBkBH,EACjB,IAAII,GAAa,CACjB,GAAI,CAACC,EAAKC,EAAQ,EAAE,EAAIF,EAAU,MAAM,GAAG,EAAE,IAAIG,GAAUA,EAAO,KAAM,CAAA,EAGxE,OAAIF,IAAQ,YACXC,EAAQA,EAAM,cAEVA,IAAU,0BACN,GAIF,GAAGD,IAAMC,EAAQ,IAAIA,IAAU,IACzC,CAAG,EACA,OAAO,OAAO,CAIjB,EAEC,OAAIL,GACHE,EAAoB,KAAK,QAAQ,GAG9BA,EAAoB,OAAS,GAAMD,GAAYA,IAAa,6BAC/DC,EAAoB,QAAQD,CAAQ,EAG9B,QAAQC,EAAoB,KAAK,GAAG,KAAKF,EAAWrD,EAAK,KAAI,EAAKA,IAAOmD,EAAO,IAAIA,IAAS,IACrG,EAEe,SAAS,aAAaJ,EAAWlD,EAAS,CA2BxD,GA1BAA,EAAU,CACT,gBAAiB,OACjB,kBAAmB,GACnB,UAAW,GACX,WAAY,GACZ,oBAAqB,GACrB,UAAW,GACX,kBAAmB,GACnB,SAAU,GACV,sBAAuB,CAAC,WAAW,EACnC,oBAAqB,GACrB,kBAAmB,GACnB,qBAAsB,GACtB,mBAAoB,GACpB,oBAAqB,GACrB,GAAGA,CACL,EAGK,OAAOA,EAAQ,iBAAoB,UAAY,CAACA,EAAQ,gBAAgB,SAAS,GAAG,IACvFA,EAAQ,gBAAkB,GAAGA,EAAQ,oBAGtCkD,EAAYA,EAAU,OAGlB,UAAU,KAAKA,CAAS,EAC3B,OAAO,iBAAiBA,EAAWlD,CAAO,EAG3C,GAAI,kBAAkBkD,CAAS,EAC9B,OAAOA,EAGR,MAAMa,EAAsBb,EAAU,WAAW,IAAI,EAC/B,CAACa,GAAuB,SAAS,KAAKb,CAAS,IAIpEA,EAAYA,EAAU,QAAQ,2BAA4BlD,EAAQ,eAAe,GAGlF,MAAMgE,EAAY,IAAI,IAAId,CAAS,EAEnC,GAAIlD,EAAQ,WAAaA,EAAQ,WAChC,MAAM,IAAI,MAAM,kEAAkE,EA4BnF,GAzBIA,EAAQ,WAAagE,EAAU,WAAa,WAC/CA,EAAU,SAAW,SAGlBhE,EAAQ,YAAcgE,EAAU,WAAa,UAChDA,EAAU,SAAW,UAIlBhE,EAAQ,sBACXgE,EAAU,SAAW,GACrBA,EAAU,SAAW,IAIlBhE,EAAQ,UACXgE,EAAU,KAAO,GACPhE,EAAQ,oBAClBgE,EAAU,KAAOA,EAAU,KAAK,QAAQ,iBAAkB,EAAE,GAOzDA,EAAU,SAAU,CAMvB,MAAMC,EAAgB,iCAEtB,IAAIC,EAAY,EACZnE,EAAS,GACb,OAAS,CACR,MAAMsD,EAAQY,EAAc,KAAKD,EAAU,QAAQ,EACnD,GAAI,CAACX,EACJ,MAGD,MAAMF,EAAWE,EAAM,CAAC,EAClBc,EAAkBd,EAAM,MACxBe,EAAeJ,EAAU,SAAS,MAAME,EAAWC,CAAe,EAExEpE,GAAUqE,EAAa,QAAQ,UAAW,GAAG,EAC7CrE,GAAUoD,EACVe,EAAYC,EAAkBhB,EAAS,OAGxC,MAAMkB,EAAUL,EAAU,SAAS,MAAME,EAAWF,EAAU,SAAS,MAAM,EAC7EjE,GAAUsE,EAAQ,QAAQ,UAAW,GAAG,EAExCL,EAAU,SAAWjE,EAItB,GAAIiE,EAAU,SACb,GAAI,CACHA,EAAU,SAAW,UAAUA,EAAU,QAAQ,CACjD,MAAC,CAAQ,CAQX,GAJIhE,EAAQ,uBAAyB,KACpCA,EAAQ,qBAAuB,CAAC,iBAAiB,GAG9C,MAAM,QAAQA,EAAQ,oBAAoB,GAAKA,EAAQ,qBAAqB,OAAS,EAAG,CAC3F,IAAIsE,EAAiBN,EAAU,SAAS,MAAM,GAAG,EACjD,MAAMO,EAAgBD,EAAeA,EAAe,OAAS,CAAC,EAE1D,cAAcC,EAAevE,EAAQ,oBAAoB,IAC5DsE,EAAiBA,EAAe,MAAM,EAAG,EAAE,EAC3CN,EAAU,SAAWM,EAAe,MAAM,CAAC,EAAE,KAAK,GAAG,EAAI,KAmB3D,GAfIN,EAAU,WAEbA,EAAU,SAAWA,EAAU,SAAS,QAAQ,MAAO,EAAE,EAGrDhE,EAAQ,UAAY,oDAAoD,KAAKgE,EAAU,QAAQ,IAKlGA,EAAU,SAAWA,EAAU,SAAS,QAAQ,SAAU,EAAE,IAK1D,MAAM,QAAQhE,EAAQ,qBAAqB,EAE9C,UAAW4D,IAAO,CAAC,GAAGI,EAAU,aAAa,KAAI,CAAE,EAC9C,cAAcJ,EAAK5D,EAAQ,qBAAqB,GACnDgE,EAAU,aAAa,OAAOJ,CAAG,EAUpC,GALI,CAAC,MAAM,QAAQ5D,EAAQ,mBAAmB,GAAKA,EAAQ,wBAA0B,KACpFgE,EAAU,OAAS,IAIhB,MAAM,QAAQhE,EAAQ,mBAAmB,GAAKA,EAAQ,oBAAoB,OAAS,EAEtF,UAAW4D,IAAO,CAAC,GAAGI,EAAU,aAAa,KAAI,CAAE,EAC7C,cAAcJ,EAAK5D,EAAQ,mBAAmB,GAClDgE,EAAU,aAAa,OAAOJ,CAAG,EAMpC,GAAI5D,EAAQ,oBAAqB,CAChCgE,EAAU,aAAa,OAGvB,GAAI,CACHA,EAAU,OAAS,mBAAmBA,EAAU,MAAM,CACtD,MAAC,CAAQ,EAGPhE,EAAQ,sBACXgE,EAAU,SAAWA,EAAU,SAAS,QAAQ,MAAO,EAAE,GAItDhE,EAAQ,oBAAsBgE,EAAU,OAC3CA,EAAU,KAAO,IAGlB,MAAMQ,EAAetB,EAGrB,OAAAA,EAAYc,EAAU,WAElB,CAAChE,EAAQ,mBAAqBgE,EAAU,WAAa,KAAO,CAACQ,EAAa,SAAS,GAAG,GAAKR,EAAU,OAAS,KACjHd,EAAYA,EAAU,QAAQ,MAAO,EAAE,IAInClD,EAAQ,qBAAuBgE,EAAU,WAAa,MAAQA,EAAU,OAAS,IAAMhE,EAAQ,oBACnGkD,EAAYA,EAAU,QAAQ,MAAO,EAAE,GAIpCa,GAAuB,CAAC/D,EAAQ,oBACnCkD,EAAYA,EAAU,QAAQ,aAAc,IAAI,GAI7ClD,EAAQ,gBACXkD,EAAYA,EAAU,QAAQ,oBAAqB,EAAE,GAG/CA,CACR,CCpRgB,SAAA,WAAWuB,EAAkBpE,EAAc,CACvD,IAAIN,EAAS,GAEb,OAAIM,GAAO,KAAa,GACpBoE,IAAY,GAAa,IAE7BpE,EAAM,aAAaA,CAAG,EAElBoE,aAAmB,MACV1E,EAAA,aAAa0E,EAAQ,IAAI,GAAKpE,GAEvC,OAAOoE,GAAW,WACT1E,EAAA,aAAa0E,CAAO,GAAKpE,GAElCoE,aAAmB,SACV1E,EAAA0E,EAAQ,KAAKpE,CAAG,GAGtBN,EACX,CAEgB,SAAA,eAAe2E,EAAyCC,EAAkB,CACtF,IAAI5E,EAAS,GAIb,GAF2B,OAAO,KAAK2E,CAAc,EAE9B,QAAU,EAAU,MAAA,GAE3C,UAAWd,KAAO,OAAO,KAAKc,CAAc,EAAG,CACrC,MAAAD,EAAUC,EAAed,CAAG,EAC5BgB,EAAcD,EAAQ,IAAIf,CAAG,EAEnC,GAAIgB,GAAe,KAAa,MAAA,GAChC,GAAIH,IAAY,GAAa,MAAA,GAY7B,GAVIA,aAAmB,IACnB1E,EAAS,aAAa0E,EAAQ,IAAI,GAAK,aAAaG,CAAW,EAE1DH,aAAmB,OACf1E,EAAA0E,EAAQ,KAAKG,CAAW,EAGxB7E,EAAA,OAAO0E,CAAO,GAAKG,EAG5B,CAAC7E,EAAe,MAAA,GAGjB,OAAAA,CACX,CCtBA,SAAS,wBAAwB8E,EAAiCC,EAAkC,CACzF,OAAA,eAAqBC,EAA0BC,EAAuC,CACzF,MAAMC,EAAU,IAAI,QAAQF,EAAOC,CAAI,EACjCE,EAAqBL,EAAY,iBAAiBI,CAAO,EAE/D,OAAIC,EAAmB,QACG,SAAS,QAIxBJ,EAAYI,CAAkB,EAAE,KAAYC,GACnBN,EAAY,kBAAkBM,CAAG,CAEhE,CACL,CAER,CA+BO,MAAM,kBAAmB,CAgB5B,YAAa,CAAE,OAAAC,EAAS,WAAY,SAAAC,EAAW,QAAS,kBAAAC,EAAoB,gBAAyD,EAAA,GAAI,CAfzIhF,EAAA,KAAAiF,EAAyC,CAAA,GACzCjF,EAAA,KAAAkF,EAA2C,CAAA,GAC3ClF,EAAA,KAAAmF,EAAA,QACAnF,EAAA,KAAAoF,EAAA,QACApF,EAAA,KAAAqF,EAAA,QACArF,EAAA,KAAAsF,EAAA,QAWSjF,EAAA,KAAA8E,EAAeL,EAAOC,CAAQ,GACnC1E,EAAA,KAAK+E,EAAgBN,EAAOC,CAAQ,EAAI,wBAAwB,KAAMvE,EAAA,KAAK2E,EAAY,GAClF9E,EAAA,KAAAgF,EAAwBP,EAAOE,CAAiB,GAChD3E,EAAA,KAAAiF,EAAyBR,EAAOE,CAAiB,EAC1D,CAbA,IAAI,aAAc,CACd,OAAOxE,EAAA,KAAK2E,EAChB,CAEA,IAAI,cAAe,CACf,OAAO3E,EAAA,KAAK4E,EAChB,CASA,iBAAiBT,EAAsC,CACnD,IAAIC,EAAqBD,EACzBC,EAAmB,QAAU,GAElB,UAAAW,KAAQ/E,EAAA,KAAKyE,GAGpB,GAFmB,WAAWM,EAAK,IAAKX,EAAmB,GAAG,GAAK,eAAeW,EAAK,QAASX,EAAmB,OAAO,EAI1H,IAAIW,EAAK,MAAO,CACZX,EAAmB,QAAU,GAC7B,MAUJ,GAPIW,EAAK,WACLX,EAAqB,IAAI,QAAQW,EAAK,SAAUX,CAAkB,EAClEA,EAAmB,QAAU,IAGjCW,EAAK,SAASX,CAAkB,EAE5BA,EAAmB,QACnB,MAID,OAAAA,CACX,CAEA,kBAAkBY,EAAyC,CACvD,MAAMC,EAAsBD,EAEjB,UAAAD,KAAQ/E,EAAA,KAAK0E,GACD,WAAWK,EAAK,IAAKE,EAAoB,GAAG,GAAK,eAAeF,EAAK,QAASE,EAAoB,OAAO,GAI5HF,EAAK,SAASE,CAAmB,EAG9B,OAAAA,CACX,CAOA,QAAQ5E,EAAWC,EAAYyB,EAAYmD,EAA4B,CAC/D,IAAAH,EAEA,GAAA1E,EAAK,aAAe,OAAQ,CAGxB,GAFG0E,EAAA1E,EAEH,CAAC0E,EAAK,KACA,MAAA,IAAI,UAAU,qBAAqB,EAGzC,GAAA,CAACA,EAAK,SACA,MAAA,IAAI,UAAU,yBAAyB,OAQ1CA,EAAA,CACH,KALiB1E,EAKX,IAJWC,EAIN,SAHYyB,EAIvB,GAAGmD,CAAA,EAIX,OAAAH,EAAK,UAALA,EAAK,QAAY,IAEbA,EAAK,MAAQ,UACR/E,EAAA,KAAAyE,GAAc,KAAKM,CAA6B,EAEhDA,EAAK,MAAQ,YACb/E,EAAA,KAAA0E,GAAe,KAAKK,CAA8B,EAGpDA,CACX,CAEA,WAAWA,EAAY,CACf,GAAAA,EAAK,MAAQ,UAAW,CACxB,MAAMI,EAAYnF,EAAA,KAAKyE,GAAc,UAAUW,GAAKA,GAAKL,CAAI,EACxD/E,EAAA,KAAAyE,GAAc,OAAOU,EAAW,CAAC,MAErC,CACD,MAAMA,EAAYnF,EAAA,KAAK0E,GAAe,UAAUU,GAAKA,GAAKL,CAAI,EACzD/E,EAAA,KAAA0E,GAAe,OAAOS,EAAW,CAAC,EAE/C,CAEA,YAAa,CACTnF,EAAA,KAAKyE,GAAc,OAAS,EAC5BzE,EAAA,KAAK0E,GAAe,OAAS,CACjC,CAEA,YAAmB,CACf,OAAO,MAAQ1E,EAAA,KAAK4E,EACxB,CAEA,cAAqB,CACjB,OAAO,MAAQ5E,EAAA,KAAK2E,EACxB,CACJ,CAlIIF,EAAA,YACAC,EAAA,YACAC,EAAA,YACAC,EAAA,YACAC,EAAA,YACAC,EAAA","x_google_ignoreList":[7]}